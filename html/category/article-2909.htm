<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2909.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>Azure Terraform（十一）Azure DevOps Pipeline 内的动态临时变量的使用 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">Azure Terraform（十一）Azure DevOps Pipeline 内的动态临时变量的使用</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<h3>思路浅析</h3> <p>　　在我们分享的 Azure Terraform 系列文中有介绍到关于 Terraform 的状态文件远程存储的问题，我们在&nbsp; Azure DevOps Pipeline 的 Task Job 加&nbsp;azure_cli_script 执行内联脚本（该脚本帮我们创建好 Terraform 状态文件存储所需要的 Azure Resource Group、 Azure Storage Account、Azure KeyVault 等资源）。大家需要注意的是，内联脚本中有使用动态变量，该变量临时存储 Azure Storage Account 的 Account Key，如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/638e3c1577944b4483be10d11d53087e.jpg" alt="Azure Terraform（十一）Azure DevOps Pipeline 内的动态临时变量的使用"></p> <p>本篇文章，我继续带领大家分析如何在 Azure DevOps Pipeline 运行中创建使用动态临时变量，使用动态临时变量替换 Azure Pipeline 管道变量。</p> <p><strong>项目整体架构图</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/a30a11eebdd0c4b137635312dd660877.jpg" alt="Azure Terraform（十一）Azure DevOps Pipeline 内的动态临时变量的使用"></p> <h3>Pipeline 变量定义、输出</h3> <p>在此阶段，我们需要利用&nbsp;azure_cli_script 任务，创建动态临时变量，输出参数，其中最主要的是将动态临时变量输出，Task yaml 如下所示</p> <p><strong>输出的变量用于同一个 stage，不同 job</strong></p> <div class="cnblogs_code"> <pre>-<span style="color: rgba(0, 0, 0, 1)"> stage: script   jobs:</span>-<span style="color: rgba(0, 0, 0, 1)"> job: azure_cli_script      steps:</span>- task: AzureCLI@<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">         displayName:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Azure CLI :Create Storage Account，Key Vault And Set KeyVault Secret</span><span style="color: rgba(128, 0, 0, 1)">'</span><strong><span style="color: rgba(255, 0, 0, 1)">         name: 'output_variable'</span></strong><span style="color: rgba(0, 0, 0, 1)">         inputs:           azureSubscription:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Microsoft Azure Subscription(xxxxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">           scriptType:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bash</span><span style="color: rgba(128, 0, 0, 1)">'</span><strong><span style="color: rgba(255, 0, 0, 1)">           addSpnToEnvironment: true</span></strong><span style="color: rgba(0, 0, 0, 1)">           scriptLocation:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">inlineScript</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">           inlineScript:</span>|<span style="color: rgba(0, 0, 0, 1)">               # create azure resource group               az group create</span>--location eastasia --<span style="color: rgba(0, 0, 0, 1)">name $(terraform_rg)                      # create azure storage account               az storage account create</span>--name $(storage_account) --resource-group $(terraform_rg) --location eastasia --<span style="color: rgba(0, 0, 0, 1)">sku Standard_LRS                      # create storage account container</span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> tf state                az storage container create</span>--name $(storage_account_container) --account-<span style="color: rgba(0, 0, 0, 1)">name $(storage_account)                      # query storage key and set variable<strong><span style="color: rgba(255, 0, 0, 1)">ACCOUNT_KEY</span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">=$(az storage account keys list --resource-group $(terraform_rg) --account-name $(storage_account) --query "[?keyName == 'key1'][value]" --</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">output tsv)</span></strong>                      # create azure keyvault               az keyvault create</span>--name $(keyvault) --resource-group $(terraform_rg) --location eastasia --enable-soft-delete<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">                      # set keyvault secret,secret value is ACCOUNT_KEY               az keyvault secret set</span>--name $(keyvault_sc) --vault-name $(keyvault)  --<span style="color: rgba(0, 0, 0, 1)">value $ACCOUNT_KEY                # set secret varivale and add to environment</span><strong><span style="color: rgba(255, 0, 0, 1)">echo "##vso[task.setvariable variable=ACCOUNT_KEY;isOutput=true]$ACCOUNT_KEY"</span></strong><span style="color: rgba(0, 0, 0, 1)">               #</span><span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">##vso[task.setvariable variable=ACCOUNT_KEY;issecret=true;isOutput=true]$ACCOUNT_KEY</span><span style="color: rgba(128, 0, 0, 1)">"</span>            -<span style="color: rgba(0, 0, 0, 1)"> job: same_stage_echo<strong><span style="color: rgba(255, 0, 0, 1)">dependsOn: azure_cli_script      variables:        ACCOUNT_KEY: $[dependencies.azure_cli_script.outputs[</span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">'output_variable.ACCOUNT_KEY'</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">]]</span></strong>      steps:</span>- task: Bash@<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">          displayName:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Bash :output temporary variables in different jobs on the same stage</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">          inputs:            targetType:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">inline</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">            script:</span>|<span style="color: rgba(0, 0, 0, 1)">              #</span><span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> ACCOUNT_KEY</span><strong><span style="color: rgba(255, 0, 0, 1)">echo "ACCOUNT_KEY is $ACCOUNT_KEY"</span></strong></pre> </div> <p><strong>输出变量用于不同&nbsp;stage</strong></p> <div class="cnblogs_code"> <pre>-<span style="color: rgba(0, 0, 0, 1)"> stage: echo_varibale<strong><span style="color: rgba(255, 0, 0, 1)">dependsOn: script   jobs:</span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">- job: different_stage_echo       variables:         ACCOUNT_KEY: $[stageDependencies.script.azure_cli_script.outputs['output_variable.ACCOUNT_KEY'</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">]]</span></strong>       steps:</span>- task: Bash@<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">           displayName:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Bash :output temporary variables in same jobs on the same stage</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">           inputs:             targetType:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">inline</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">             script:</span>|<span style="color: rgba(0, 0, 0, 1)">               #</span><span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> ACCOUNT_KEY</span><strong><span style="color: rgba(255, 0, 0, 1)">echo "ACCOUNT_KEY is $ACCOUNT_KEY"</span></strong></pre> </div> <p>以下为完整的&nbsp; &nbsp;azure-pipelines-1.yaml</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)"># Starter pipeline # Start with a minimal pipeline that you can customize to build and deploy your code. # Add steps that build, run tests, deploy, and</span><span style="color: rgba(0, 0, 255, 1)">more</span><span style="color: rgba(0, 0, 0, 1)">: # https:</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">aka.ms/yaml</span><span style="color: rgba(0, 0, 0, 1)"> trigger:</span>-<span style="color: rgba(0, 0, 0, 1)"> remote_stats  pool:   vmImage: ubuntu</span>-<span style="color: rgba(0, 0, 0, 1)">latest  stages:</span>-<span style="color: rgba(0, 0, 0, 1)"> stage: script   jobs:</span>-<span style="color: rgba(0, 0, 0, 1)"> job: azure_cli_script      steps:</span>- task: AzureCLI@<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">         displayName:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Azure CLI :Create Storage Account，Key Vault And Set KeyVault Secret</span><span style="color: rgba(128, 0, 0, 1)">'</span><strong><span style="color: rgba(255, 0, 0, 1)">         name: 'output_variable'</span></strong><span style="color: rgba(0, 0, 0, 1)">         inputs:           azureSubscription:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Microsoft Azure Subscription(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx)</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">           scriptType:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">bash</span><span style="color: rgba(128, 0, 0, 1)">'</span><strong><span style="color: rgba(255, 0, 0, 1)">           addSpnToEnvironment: true</span></strong><span style="color: rgba(0, 0, 0, 1)">           scriptLocation:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">inlineScript</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">           inlineScript:</span>|<span style="color: rgba(0, 0, 0, 1)">               # create azure resource group               az group create</span>--location eastasia --<span style="color: rgba(0, 0, 0, 1)">name $(terraform_rg)                      # create azure storage account               az storage account create</span>--name $(storage_account) --resource-group $(terraform_rg) --location eastasia --<span style="color: rgba(0, 0, 0, 1)">sku Standard_LRS                      # create storage account container</span><span style="color: rgba(0, 0, 255, 1)">for</span><span style="color: rgba(0, 0, 0, 1)"> tf state                az storage container create</span>--name $(storage_account_container) --account-<span style="color: rgba(0, 0, 0, 1)">name $(storage_account)                      # query storage key and set variable<strong><span style="color: rgba(255, 0, 0, 1)">ACCOUNT_KEY</span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">=$(az storage account keys list --resource-group $(terraform_rg) --account-name $(storage_account) --query "[?keyName == 'key1'][value]" --</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">output tsv)</span></strong>                      # create azure keyvault               az keyvault create</span>--name $(keyvault) --resource-group $(terraform_rg) --location eastasia --enable-soft-delete<span style="color: rgba(0, 0, 255, 1)">false</span><span style="color: rgba(0, 0, 0, 1)">                      # set keyvault secret,secret value is ACCOUNT_KEY               az keyvault secret set</span>--name $(keyvault_sc) --vault-name $(keyvault)  --<span style="color: rgba(0, 0, 0, 1)">value $ACCOUNT_KEY                # set secret varivale and add to environment</span><strong><span style="color: rgba(255, 0, 0, 1)">echo "##vso[task.setvariable variable=ACCOUNT_KEY;isOutput=true]$ACCOUNT_KEY"               #echo "##vso[task.setvariable variable=ACCOUNT_KEY;issecret=true;isOutput=true]$ACCOUNT_KEY"</span></strong>            -<span style="color: rgba(0, 0, 0, 1)"> job: same_stage_echo<strong><span style="color: rgba(255, 0, 0, 1)">dependsOn: azure_cli_script      variables:        ACCOUNT_KEY: $[dependencies.azure_cli_script.outputs[</span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">'output_variable.ACCOUNT_KEY'</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">]]</span></strong>      steps:</span>- task: Bash@<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">          displayName:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Bash :output temporary variables in different jobs on the same stage</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">          inputs:            targetType:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">inline</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">            script:</span>|<span style="color: rgba(0, 0, 0, 1)">              #</span><span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> ACCOUNT_KEY</span><strong><span style="color: rgba(255, 0, 0, 1)">echo "ACCOUNT_KEY is $ACCOUNT_KEY"</span></strong>  -<span style="color: rgba(0, 0, 0, 1)"> stage: echo_varibale<strong><span style="color: rgba(255, 0, 0, 1)">dependsOn: script   jobs:</span></strong></span><strong><span style="color: rgba(255, 0, 0, 1)">- job: different_stage_echo       variables:         ACCOUNT_KEY: $[stageDependencies.script.azure_cli_script.outputs['output_variable.ACCOUNT_KEY'</span></strong><span style="color: rgba(0, 0, 0, 1)"><strong><span style="color: rgba(255, 0, 0, 1)">]]</span></strong>       steps:</span>- task: Bash@<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">           displayName:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">Bash :output temporary variables in same jobs on the same stage</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">           inputs:             targetType:</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(128, 0, 0, 1)">inline</span><span style="color: rgba(128, 0, 0, 1)">'</span><span style="color: rgba(0, 0, 0, 1)">             script:</span>|<span style="color: rgba(0, 0, 0, 1)">               #</span><span style="color: rgba(0, 0, 255, 1)">echo</span><span style="color: rgba(0, 0, 0, 1)"> ACCOUNT_KEY</span><strong><span style="color: rgba(255, 0, 0, 1)">echo "ACCOUNT_KEY is $ACCOUNT_KEY"</span></strong></pre> </div> <p><span style="color: rgba(255, 102, 0, 1)"><strong>*****重点*****：管道内变量与动态临时变量使用区别</strong></span></p> <p><span style="color: rgba(255, 102, 0, 1)"><strong>Pipeline 管道内使用方式：$(变量名称)</strong></span></p> <p><span style="color: rgba(255, 102, 0, 1)"><strong>动态临时变量使用方式：$变量名称</strong></span></p> <h3>配置 Pipeline 管道变量</h3> <p>使用 Azure CLI 创建 Azure Storage Account、Azure Key Vault 的内联脚本中使用管理内变量控制参数</p> <table border="0"> <tbody> <tr> <td><span style="color: rgba(0, 0, 255, 1)"><strong><span style="background-color: rgba(255, 255, 255, 1)">变量名</span></strong></span></td> <td><span style="color: rgba(0, 0, 255, 1)"><strong><span style="background-color: rgba(255, 255, 255, 1)">变量值</span></strong></span></td> </tr> <tr> <td>terraform_rg</td> <td>Web_Test_TF_RG</td> </tr> <tr> <td>storage_account</td> <td>cnbatetfstorage</td> </tr> <tr> <td>storage_account_container</td> <td>tf-state</td> </tr> <tr> <td>keyvault</td> <td>cnbate-terraform-kv</td> </tr> <tr> <td>keyvault_sc</td> <td>terraform-stste-storage-key</td> </tr> <tr> <td>container_key</td> <td>cnbate.tf.stats</td> </tr> </tbody> </table> <h3>运行 Pipeline，查看配置输出</h3> <p>由于我们已经在 azure-pipelines-1.yaml 文件中指定了工作分支 “remote_stats”，当我们只要触发 “remote_stats” 分支的 “push” 或者 “pull_request” 动作都会触发 Azure DevOps Pipeline 的运行。</p> <p><strong>相同 stage 内的 job 输出</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/e0e954a6d0cd4710f24f96553a5e4e35.jpg" alt="Azure Terraform（十一）Azure DevOps Pipeline 内的动态临时变量的使用"></p> <p><strong>不同 stage 的 job 输出</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/c84cbd4ebade466e0781853e7967c3fd.jpg" alt="Azure Terraform（十一）Azure DevOps Pipeline 内的动态临时变量的使用"></p> <h3>总结</h3> <p>本期实验，我们学习了如何在&nbsp;Azure DevOps Pipeline 运行期间创建的动态临时变量以及变量的输出，使得我们更加灵活的在任意 job 中声明自定义的动态临时变量，并将动态临时变量应用到任意的 job 中，这种方式有区别与Pipeline 管道内变量，尤其是在定义阶段和使用语法上，详细内容参考官方文档。</p> <p>在脚本中设置变量：https://docs.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts</p> <p>github 代码地址：https://github.com/yunqian44/Terraform_Cnbate_Traffic_Manager</p> <p>Terraform 在 Azure DevOps 中的使用系列：https://www.cnblogs.com/AllenMaster/category/1876925.html</p> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2908.htm">Spring按业务模块输出日志到不同的文件_在线工具</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2910.htm">UVM如何处理out-of-order乱序传输</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7049.htm" title="宠物领养合同违约金30000元合法吗（领养宠物签的合同到底有用吗）">宠物领养合同违约金30000元合法吗（领养宠物签的合同到底有用吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-4535.htm" title="聊斋志异之田七郎（顾佳）一看就会，">聊斋志异之田七郎（顾佳）一看就会，</a></li>
                        <li class="py-2"><a href="/html/category/article-6124.htm" title="宠物犬免费领养（宠物狗免费领养）">宠物犬免费领养（宠物狗免费领养）</a></li>
                        <li class="py-2"><a href="/html/category/article-6037.htm" title="成都宠物领养中心在哪（成都宠物领养中心免费）">成都宠物领养中心在哪（成都宠物领养中心免费）</a></li>
                        <li class="py-2"><a href="/html/category/article-7094.htm" title="属马养猫运气会变差吗（属马的能养猫咪吗）">属马养猫运气会变差吗（属马的能养猫咪吗）</a></li>
                        <li class="py-2"><a href="/html/category/article-6036.htm" title="广州宠物领养网免费吗现在（广州宠物猫领养中心）">广州宠物领养网免费吗现在（广州宠物猫领养中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-6865.htm" title="缘分一道桥抖音翻唱（况天佑）太疯狂了，">缘分一道桥抖音翻唱（况天佑）太疯狂了，</a></li>
                        <li class="py-2"><a href="/html/category/article-6589.htm" title="茄子包饺子馅做法大全(茄子包饺子怎么做好吃呢)">茄子包饺子馅做法大全(茄子包饺子怎么做好吃呢)</a></li>
                        <li class="py-2"><a href="/html/category/article-6125.htm" title="圣诞款包包(圣诞节的包包)">圣诞款包包(圣诞节的包包)</a></li>
                        <li class="py-2"><a href="/html/category/article-7003.htm" title="宠康动物医院地址在哪里（宠康动物医院地址在哪里呀）">宠康动物医院地址在哪里（宠康动物医院地址在哪里呀）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">10</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>