<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-3443.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<p>有朋友好奇为什么将 <code>闭包</code> 归于语法糖，这里简单声明下，C# 中的所有闭包最终都会归结于 <code>类</code> 和 <code>方法</code>，为什么这么说，因为 C# 的基因就已经决定了，如果大家了解 CLR 的话应该知道， C#中的<code>类</code>最终都会用 <code>MethodTable</code> 来承载，方法都会用 <code>MethodDesc</code> 来承载， 所以不管你怎么玩都逃不出这三界之内。</p> <p>这篇我们就来聊聊C#中的闭包底层原理及玩法，表面上的概念就不说了哈。</p> <h2 id="一普通闭包玩法">一：普通闭包玩法</h2> <h3 id="1-案例演示">1. 案例演示</h3> <p>放了方便说明，先上一段测试代码：</p> <pre><code class="language-C#">         static void Main(string[] args)         {             int y = 10;              Func&lt;int, int&gt; sum = x =&gt;             {                 return x + y;             };              Console.WriteLine(sum(11));         }  </code></pre> <p>刚才也说了，C#的基因决定了最终会用 <code>class</code> 和 <code>method</code> 对 <code>闭包</code> 进行<strong>面向对象</strong>改造，那如何改造呢？ 这里有两个问题：</p> <ul> <li>匿名方法如何面向对象改造</li> </ul> <p><code>方法</code> 不能脱离 <code>类</code> 而独立存在，所以 <code>编译器</code> 必须要为其生成一个类，然后再给匿名方法配一个名字即可。</p> <ul> <li>捕获到的 y 怎么办</li> </ul> <p>捕获是一个很<code>抽象</code>的词，一点都不接底气，这里我用 <code>面向对象</code> 的角度来解读一下，这个问题本质上就是 <code>栈变量</code> 和 <code>堆变量</code> 混在一起的一次行为冲突，什么意思呢？</p> <ol> <li>栈变量</li> </ol> <p>大家应该知道 <code>栈变量</code> 所在的帧空间是由 <code>esp</code> 和 <code>ebp</code> 进行控制，一旦方法结束，esp 会往回收缩造成局部变量从栈中移除。</p> <ol start="2"> <li>堆变量</li> </ol> <p>委托是一个引用类型，它是由 GC 进行管理回收，只要它还被人牵着，自然就不会被回收。</p> <p>到这里我相信你肯定发现了一个严重的问题， 一旦 <code>sum</code> 委托逃出了方法，这时局部变量 y 肯定会被销毁，如果真的被销毁了, 后续再执行 <code>sum</code> 委托自然就是一个巨大的bug，那怎么办呢？</p> <p>编译器自然早就考虑到了这种情况，它在进行面向对象改造的时候，特意为 <code>类</code> 定义了一个 <code>public</code> 类型的字段，用这个字段来承载这个局部变量。</p> <h3 id="2-手工改造">2. 手工改造</h3> <p>有了这些多前置知识，我相信你肯定会知道如何改造了，参考代码如下：</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             int y = 10;              //Func&lt;int, int&gt; sum = x =&gt;             //{             //    return x + y;             //};              //面向对象改造             FuncClass funcClass = new FuncClass() { y = y };              Func&lt;int, int&gt; sum = funcClass.Run;              Console.WriteLine(sum(11));         }     }      public class FuncClass     {         public int y;          public int Run(int x)         {             return x + y;         }     }  </code></pre> <p>如果你不相信的话，可以看下 <code>MSIL</code> 代码。</p> <pre><code class="language-C#"> .method private hidebysig static  	void Main ( 		string[] args 	) cil managed  { 	// Method begins at RVA 0x2050 	// Code size 43 (0x2b) 	.maxstack 2 	.entrypoint 	.locals init ( 		[0] class ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0' 'CS</code></pre> <pre></pre> <pre><code class="language-C#">lt;&gt;8__locals0', [1] class [System.Runtime]System.Func`2&lt;int32, int32&gt; sum ) IL_0000: newobj instance void ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0'::.ctor() IL_0005: stloc.0 IL_0006: nop IL_0007: ldloc.0 IL_0008: ldc.i4.s 10 IL_000a: stfld int32 ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0'::y IL_000f: ldloc.0 IL_0010: ldftn instance int32 ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0'::'&lt;Main&gt;b__0'(int32) IL_0016: newobj instance void class [System.Runtime]System.Func`2&lt;int32, int32&gt;::.ctor(object, native int) IL_001b: stloc.1 IL_001c: ldloc.1 IL_001d: ldc.i4.s 11 IL_001f: callvirt instance !1 class [System.Runtime]System.Func`2&lt;int32, int32&gt;::Invoke(!0) IL_0024: call void [System.Console]System.Console::WriteLine(int32) IL_0029: nop IL_002a: ret } // end of method Program::Main .class nested private auto ansi sealed beforefieldinit '&lt;&gt;c__DisplayClass0_0' extends [System.Runtime]System.Object { .custom instance void [System.Runtime]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = ( 01 00 00 00 ) // Fields .field public int32 y // Methods .method public hidebysig specialname rtspecialname instance void .ctor () cil managed { // Method begins at RVA 0x2090 // Code size 8 (0x8) .maxstack 8 IL_0000: ldarg.0 IL_0001: call instance void [System.Runtime]System.Object::.ctor() IL_0006: nop IL_0007: ret } // end of method '&lt;&gt;c__DisplayClass0_0'::.ctor .method assembly hidebysig instance int32 '&lt;Main&gt;b__0' ( int32 x ) cil managed { // Method begins at RVA 0x209c // Code size 14 (0xe) .maxstack 2 .locals init ( [0] int32 ) IL_0000: nop IL_0001: ldarg.1 IL_0002: ldarg.0 IL_0003: ldfld int32 ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0'::y IL_0008: add IL_0009: stloc.0 IL_000a: br.s IL_000c IL_000c: ldloc.0 IL_000d: ret } // end of method '&lt;&gt;c__DisplayClass0_0'::'&lt;Main&gt;b__0' } // end of class &lt;&gt;c__DisplayClass0_0 </code></pre> <h2 id="二循环下闭包玩法">二：循环下闭包玩法</h2> <p>为了方便说明，还是先上一段代码。</p> <pre><code class="language-C#">         static void Main(string[] args)         {             var actions = new Action[10];              for (int i = 0; i &lt; actions.Length; i++)             {                 actions[i] = () =&gt; Console.WriteLine(i);             }              foreach (var item in actions) item();         }  </code></pre> <p>然后把代码跑起来：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/85960185f7380a922a25b6968b20f557.jpg" alt="C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具"></p> <p>我相信有非常多的朋友都踩过这个坑，那为什么会出现这样的结果呢？ 我试着从原理上解读一下。</p> <h3 id="1-原理解读">1. 原理解读</h3> <p>根据前面所学的 <code>面向对象</code> 改造法，我相信大家肯定会很快改造出来，参考代码如下：</p> <pre><code class="language-C#">     class Program     {         static void Main(string[] args)         {             var actions = new Action[10];              for (int i = 0; i &lt; actions.Length; i++)             {                 //actions[i] = () =&gt; Console.WriteLine(i);                  //改造后                 var funcClass = new FuncClass() { i = i };                 actions[i] = funcClass.Run;             }              foreach (var item in actions) item();         }     }      public class FuncClass     {         public int i;          public void Run()         {             Console.WriteLine(i);         }     }  </code></pre> <p>然后跑一下结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/fd3adf7e859d7f71acb3a5eb6f370b7b.jpg" alt="C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具"></p> <p>真奇葩，我们的改造方案一点问题都没有，咋 <code>编译器</code> 就弄不对呢？要想找到案例，只能看 MSIL 啦，简化后如下：</p> <pre><code class="language-C#"> 		IL_0001: ldc.i4.s 10 		IL_0003: newarr [System.Runtime]System.Action 		IL_0008: stloc.0 		IL_0009: newobj instance void ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0'::.ctor() 		IL_000e: stloc.1 		IL_000f: ldloc.1 		IL_0010: ldc.i4.0 		IL_0011: stfld int32 ConsoleApp1.Program/'&lt;&gt;c__DisplayClass0_0'::i 		IL_0016: br.s IL_003e 		// loop start (head: IL_003e) 			IL_0018: nop 			IL_0019: ldloc.0             ... 		// end loop  </code></pre> <p>如果有兴趣大家可以看下完整版，它的实现方式大概是这样的。</p> <pre><code class="language-C#">         static void Main(string[] args)         {             var actions = new Action[10];              var funcClass = new FuncClass();              for (int i = 0; i &lt; actions.Length; i++)             {                 actions[i] = funcClass.Run;                  funcClass.i = i + 1;             }              foreach (var item in actions) item();         }  </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/d06f65f42b0597e7a20e9e3587a86eda.jpg" alt="C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具"></p> <p>原来问题就出在了它只 new 了一次，同时 for 循环中只是对 <code>i</code> 进行了赋值,导致了问题的发生。</p> <h3 id="2-编译器的想法">2. 编译器的想法</h3> <p>为什么编译器会这么改造代码，我觉得可能基于下面两点。</p> <ul> <li>不想 new 太多的类实例</li> </ul> <p>new一个对象，其实并没有大家想象的那么简单，在 clr 内部会分 <code>快速路径</code> 和 <code>慢速路径</code>，同时还为此导致 GC 回收，为了保存<code>一个变量</code> 需要专门 new 一个实例，这代价真的太大了。。。</p> <ul> <li>有更好的解决办法</li> </ul> <p>更好的办法就是用 <code>方法参数</code> ，方法的字节码是放置在 CLR 的 codeheap 上，独此一份，同时方法参数只是在<code>栈</code>上多了一个存储空间而已，这代价就非常小了。</p> <h2 id="三-代码改造">三： 代码改造</h2> <p>知道编译器的苦衷后，改造起来就很简单了，大概有如下两种。</p> <h3 id="1-强制-new-实例">1. 强制 new 实例</h3> <p>这种改造法就是强制在每次 for 中 new 一个实例来承载 <code>i</code> 变量，参考代码如下：</p> <pre><code class="language-C#">         static void Main(string[] args)         {             var actions = new Action[10];              for (int i = 0; i &lt; actions.Length; i++)             {                 var j = i;                 actions[i] = () =&gt; Console.WriteLine(j);             }              foreach (var item in actions) item();         }  </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/e90a8ec5317a52b342c6969392113cfc.jpg" alt="C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具"></p> <h3 id="2-采用方法参数">2. 采用方法参数</h3> <p>为了能够让 i 作为方法参数，只能将 <code>Action</code> 改成 <code>Action&lt;int&gt;</code>，虽然你可能要为此掉头发，但对程序性能来说是巨大的，参考代码如下：</p> <pre><code class="language-C#">         static void Main(string[] args)         {             var actions = new Action&lt;int&gt;[10];              for (int i = 0; i &lt; actions.Length; i++)             {                 actions[i] = (j) =&gt; Console.WriteLine(j);             }              for (int i = 0; i &lt; actions.Length; i++)             {                 actions[i](i);             }         }  </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220428/2aa274bc507dd9439cbed746a414a640.jpg" alt="C#语法糖系列 —— 第三篇：聊聊闭包的底层玩法_在线工具"></p> <p>好了，洋洋洒洒写了这么多，希望对大家有帮助。</p> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-3142.htm">Git恢复之前版本的两种方法reset、revert（图文详解）</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-3444.htm">关于Android安装apk出现解析包异常问题情况总结</a></p>
                                                                                            </div>
                                                                                        <div class="panel panel-default mt-5">
                                                <div class="panel-heading">
                                                    <h3 class="m-0">推荐文章</h3>
                                                </div>
                                                <div class="panel-body">
                                                    <ul class="p-0 x-0">
                                                                                                                <li class="py-2"><a href="/html/category/article-3119.htm">Cpp的异常处理Exception Handling-笔记</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-3094.htm">java实现简单三子棋游戏_java</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-3076.htm">vue使用store</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-3033.htm">Typescript 和 Javascript之间的区别</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-2988.htm">设计模式：单例模式 C++实现</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-2965.htm">Mybaitis入门基础MyBatis的概念引入及工作原理</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-2947.htm">网络地址匹配</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-2946.htm">JavaScript将相同条目分组为子数组方法详解</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-2918.htm">Java中的抽象类与接口</a></li>
                                                                                                                <li class="py-2"><a href="/html/category/article-2908.htm">Spring按业务模块输出日志到不同的文件_在线工具</a></li>
                                                                                                            </ul>
                                                </div>
                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-7324.htm" title="宠物粮加工厂原料有哪些呢 宠物粮加工厂原料有哪些呢图片">宠物粮加工厂原料有哪些呢 宠物粮加工厂原料有哪些呢图片</a></li>
                        <li class="py-2"><a href="/html/category/article-7785.htm" title="动物医院诊疗范围包括哪些内容 动物医院诊疗范围包括哪些内容呢">动物医院诊疗范围包括哪些内容 动物医院诊疗范围包括哪些内容呢</a></li>
                        <li class="py-2"><a href="/html/category/article-7646.htm" title="世界上最大的四个岛屿(世界最大岛屿排名)">世界上最大的四个岛屿(世界最大岛屿排名)</a></li>
                        <li class="py-2"><a href="/html/category/article-7279.htm" title="到哪领养狗（到哪领养狗狗）">到哪领养狗（到哪领养狗狗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7233.htm" title="生物疫苗和药品（生物医药和疫苗）">生物疫苗和药品（生物医药和疫苗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7509.htm" title="动物医院叫什么医院名称呢英文（动物医院的名字）">动物医院叫什么医院名称呢英文（动物医院的名字）</a></li>
                        <li class="py-2"><a href="/html/category/article-7463.htm" title="养猫的人容易得15种病怎么预防传染（养猫的人容易得15种病怎么预防传染病）">养猫的人容易得15种病怎么预防传染（养猫的人容易得15种病怎么预防传染病）</a></li>
                        <li class="py-2"><a href="/html/category/article-7095.htm" title="广州宠物领养中心有哪些公司 广州宠物领养中心有哪些公司招聘">广州宠物领养中心有哪些公司 广州宠物领养中心有哪些公司招聘</a></li>
                        <li class="py-2"><a href="/html/category/article-6589.htm" title="茄子包饺子馅做法大全(茄子包饺子怎么做好吃呢)">茄子包饺子馅做法大全(茄子包饺子怎么做好吃呢)</a></li>
                        <li class="py-2"><a href="/html/category/article-7370.htm" title="宠物粮食店铺名字怎么起 宠物粮食店铺名字怎么起好听">宠物粮食店铺名字怎么起 宠物粮食店铺名字怎么起好听</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>