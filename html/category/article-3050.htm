<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-3050.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>pytorch数据批次的大小对模型拟合效果的影响 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">pytorch数据批次的大小对模型拟合效果的影响</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>本次使用大小为 [29995x30] 的数据集进行回归预测，研究设置不同的数据批次对模型拟合效果的影响。</p> <h2> <a id="_1" rel="nofollow"></a>过程：</h2> <p>1、导入数据<br /> 2、建立 XGBRegressor() 模型，计算均方误差。<br /> 3、建立4个结构相同的深度学习模型，在相同的循环次数下设置不同的批次查看均方误差别，及训练批次和验证批次不同的情况下均方误差的的差别。</p> <h2> <a id="_6" rel="nofollow"></a>导入模块及数据：</h2> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np <span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">as</span> ps <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split <span class="token keyword">from</span> xgboost <span class="token keyword">import</span> XGBRegressor <span class="token keyword">import</span> torch <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F <span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim <span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> TensorDataset <span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader  data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"finally_data.xlsx"</span><span class="token punctuation">)</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token string">'Unnamed: 0'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/9b8fab7509f9304c696c7d048384cdae.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <h2> <a id="_27" rel="nofollow"></a>数据处理</h2> <pre><code class="prism language-python"><span class="token comment">#划分数据和标签</span> train <span class="token operator">=</span> data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token string">"二手车交易价格"</span><span class="token punctuation">)</span> target <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"二手车交易价格"</span><span class="token punctuation">]</span> scale_data <span class="token operator">=</span> ps<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>train<span class="token punctuation">)</span><span class="token comment">#标准化</span> normalize_data <span class="token operator">=</span> ps<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span>train<span class="token punctuation">,</span>norm<span class="token operator">=</span><span class="token string">"l1"</span><span class="token punctuation">)</span><span class="token comment">#归一化</span> <span class="token comment">#划分训练集和测试集</span> xs_train<span class="token punctuation">,</span>xs_test<span class="token punctuation">,</span>ys_train<span class="token punctuation">,</span>ys_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>scale_data<span class="token punctuation">,</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span> xn_train<span class="token punctuation">,</span>xn_test<span class="token punctuation">,</span>yn_train<span class="token punctuation">,</span>yn_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>normalize_data<span class="token punctuation">,</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="xgboost_38" rel="nofollow"></a>xgboost建模</h2> <pre><code class="prism language-python"><span class="token comment">#标准化后的数据</span> xgb <span class="token operator">=</span> XGBRegressor<span class="token punctuation">(</span>max_depth<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>n_estimators<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span> xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xs_train<span class="token punctuation">,</span>ys_train<span class="token punctuation">)</span> train_predints <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xs_train<span class="token punctuation">)</span> test_predints <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xs_test<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"s:"</span><span class="token punctuation">,</span>xgb<span class="token punctuation">.</span>score<span class="token punctuation">(</span>xs_test<span class="token punctuation">,</span>ys_test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#归一化后的数据</span> xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>xn_train<span class="token punctuation">,</span>yn_train<span class="token punctuation">)</span> train_predintn <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xn_train<span class="token punctuation">)</span> test_predintn <span class="token operator">=</span> xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>xn_test<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>xgb<span class="token punctuation">.</span>score<span class="token punctuation">(</span>xn_test<span class="token punctuation">,</span>yn_test<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_52" rel="nofollow"></a>模型评分</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/3cb4a0ccee467e83e7dbd8eccd5cb0b4.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <h2> <a id="_54" rel="nofollow"></a>计算误差</h2> <pre><code class="prism language-python"><span class="token comment">#平均误差</span> <span class="token keyword">def</span> <span class="token function">mse</span><span class="token punctuation">(</span>predict<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>     MSE <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>predict<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> MSE <span class="token comment">#均方误差</span> <span class="token keyword">def</span> <span class="token function">mse2</span><span class="token punctuation">(</span>predict<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>     MSE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>predict<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> MSE     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均误差："</span><span class="token punctuation">)</span> train_mess <span class="token operator">=</span> mse<span class="token punctuation">(</span>train_predints<span class="token punctuation">,</span>ys_train<span class="token punctuation">)</span> test_mess <span class="token operator">=</span> mse<span class="token punctuation">(</span>test_predints<span class="token punctuation">,</span>ys_test<span class="token punctuation">)</span>  train_mesn <span class="token operator">=</span> mse<span class="token punctuation">(</span>train_predintn<span class="token punctuation">,</span>yn_train<span class="token punctuation">)</span> test_mesn <span class="token operator">=</span> mse<span class="token punctuation">(</span>test_predintn<span class="token punctuation">,</span>yn_test<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"s:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mess<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mess<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mesn<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mesn<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"均方误差："</span><span class="token punctuation">)</span> train_mess2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>train_predints<span class="token punctuation">,</span>ys_train<span class="token punctuation">)</span> test_mess2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>test_predints<span class="token punctuation">,</span>ys_test<span class="token punctuation">)</span>  train_mesn2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>train_predintn<span class="token punctuation">,</span>yn_train<span class="token punctuation">)</span> test_mesn2 <span class="token operator">=</span> mse2<span class="token punctuation">(</span>test_predintn<span class="token punctuation">,</span>yn_test<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"s:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mess2<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mess2<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n:训练集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>train_mesn2<span class="token punctuation">}</span></span><span class="token string"> 测试集：</span><span class="token interpolation"><span class="token punctuation">{<!-- --></span>test_mesn2<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> </code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/69fa1c33309526930429cb6a2e17687e.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <h2> <a id="_86" rel="nofollow"></a>深度学习模型</h2> <pre><code class="prism language-python"><span class="token comment">#将数据类型转换为tensor</span> txs_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xs_train<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> tys_train <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>ys_train<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> txs_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>xs_test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> tys_test <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>ys_test<span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">type</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token comment">#定义批次及设备</span> sample_train <span class="token operator">=</span> txs_train<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  sample_test <span class="token operator">=</span> txs_test<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> batch <span class="token operator">=</span> <span class="token number">64</span>    <span class="token comment">#最小批次</span> batch_big <span class="token operator">=</span> <span class="token number">1024</span>    <span class="token comment">#中间批次</span> batch_biggest <span class="token operator">=</span> sample_train    <span class="token comment">#最大批次</span> device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_101" rel="nofollow"></a>定义模型及训练</h2> <pre><code class="prism language-python"><span class="token comment"># 模型初始化：方法一</span> net0_model <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>     nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  net0_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment">#定义损失函数及优化器</span> loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net0_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment"># 定义训练方法</span> <span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span>sample_train<span class="token punctuation">,</span>sample_test<span class="token punctuation">,</span>batch<span class="token punctuation">,</span>train_datas<span class="token punctuation">,</span>train_ys<span class="token punctuation">,</span>test_datas<span class="token punctuation">,</span>test_ys<span class="token punctuation">,</span>optimizer<span class="token punctuation">,</span>loss_fun<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>device<span class="token punctuation">)</span><span class="token punctuation">:</span>     model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>     times_train <span class="token operator">=</span> sample_train <span class="token operator">//</span> batch <span class="token keyword">if</span> sample_train <span class="token operator">%</span> batch <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> sample_train <span class="token operator">//</span> batch <span class="token operator">+</span> <span class="token number">1</span>     train_loss <span class="token operator">=</span> <span class="token number">0.0</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times_train<span class="token punctuation">)</span><span class="token punctuation">:</span>         start <span class="token operator">=</span> i <span class="token operator">*</span> batch         end <span class="token operator">=</span> start <span class="token operator">+</span> batch         train_x <span class="token operator">=</span> train_datas<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         train_y <span class="token operator">=</span> train_ys<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         output <span class="token operator">=</span> model<span class="token punctuation">(</span>train_x<span class="token punctuation">)</span>         loss <span class="token operator">=</span> loss_fun<span class="token punctuation">(</span>output<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span>         train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>         loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"split_loss : {:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},\ntrain_loss:{:.4f}:"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>train_loss<span class="token operator">/</span>times_train<span class="token punctuation">)</span><span class="token punctuation">)</span>              model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     test_loss <span class="token operator">=</span> <span class="token number">0.0</span>     times_test <span class="token operator">=</span> sample_test <span class="token operator">//</span> batch <span class="token keyword">if</span> sample_test <span class="token operator">%</span> batch <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> sample_test <span class="token operator">//</span> batch <span class="token operator">+</span> <span class="token number">1</span>     <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>times_test<span class="token punctuation">)</span><span class="token punctuation">:</span>             start <span class="token operator">=</span> i <span class="token operator">*</span> batch             end <span class="token operator">=</span> start <span class="token operator">+</span> batch             test_x <span class="token operator">=</span> test_datas<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             test_y <span class="token operator">=</span> test_ys<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             predict <span class="token operator">=</span> model<span class="token punctuation">(</span>test_x<span class="token punctuation">)</span>             test_loss <span class="token operator">+=</span> loss_fun<span class="token punctuation">(</span>predict<span class="token punctuation">,</span>test_y<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_loss:{:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_loss<span class="token operator">/</span>times_test<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">#最大批次(全部数据)计算</span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     train_model<span class="token punctuation">(</span>net0_model<span class="token punctuation">,</span>sample_train<span class="token punctuation">,</span>sample_test<span class="token punctuation">,</span>batch_biggest<span class="token punctuation">,</span>txs_train<span class="token punctuation">,</span>tys_train<span class="token punctuation">,</span>txs_test<span class="token punctuation">,</span>tys_test<span class="token punctuation">,</span>optimizer<span class="token punctuation">,</span>loss_function<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>device<span class="token punctuation">)</span> </code></pre> <h2> <a id="_155" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/710b15d4354745b37adb04492cbf84bd.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <pre><code class="prism language-python"><span class="token comment"># 模型初始化：方法二</span> <span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token builtin">super</span><span class="token punctuation">(</span>Model<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span><span class="token builtin">input</span> <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>hidden <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>          <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>         x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">input</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>         x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hidden<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>         x <span class="token operator">=</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                  <span class="token keyword">return</span> x  net1_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span> net1_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net1_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment">#batch为 1024 时</span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     train_model<span class="token punctuation">(</span>net1_model<span class="token punctuation">,</span>sample_train<span class="token punctuation">,</span>sample_test<span class="token punctuation">,</span>batch_big<span class="token punctuation">,</span>txs_train<span class="token punctuation">,</span>tys_train<span class="token punctuation">,</span>txs_test<span class="token punctuation">,</span>tys_test<span class="token punctuation">,</span>optimizer<span class="token punctuation">,</span>loss_function<span class="token punctuation">,</span>epoch<span class="token punctuation">,</span>device<span class="token punctuation">)</span> </code></pre> <h2> <a id="_182" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/1731502a0b030e11991388e399c4fbd4.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <pre><code class="prism language-python"><span class="token comment">#采用TensorDataset()和DataLoader()封装数据</span> x_train_td <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>txs_train<span class="token punctuation">,</span>tys_train<span class="token punctuation">)</span> x_train_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>x_train_td<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch<span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  x_test_td <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>txs_test<span class="token punctuation">,</span>tys_test<span class="token punctuation">)</span> x_test_dl <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>x_test_td<span class="token punctuation">,</span>batch_size<span class="token operator">=</span>batch<span class="token punctuation">)</span>  net2_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span> net2_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net2_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span>  <span class="token comment">#训练批次为64，测试批次为全部数据 </span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">for</span> data<span class="token punctuation">,</span>label <span class="token keyword">in</span> x_train_dl<span class="token punctuation">:</span>         data<span class="token punctuation">,</span>label <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         out <span class="token operator">=</span> net2_model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>         loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>out<span class="token punctuation">,</span>label<span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>         loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"split_loss:"</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         txs_train<span class="token punctuation">,</span> tys_train <span class="token operator">=</span> txs_train<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> tys_train<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         txs_test<span class="token punctuation">,</span> tys_test <span class="token operator">=</span> txs_test<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span> tys_test<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         train_all_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>net2_model<span class="token punctuation">(</span>txs_train<span class="token punctuation">)</span><span class="token punctuation">,</span>tys_train<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         test_all_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>net2_model<span class="token punctuation">(</span>txs_test<span class="token punctuation">)</span><span class="token punctuation">,</span>tys_test<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},train_mse:{:.4f},test_mse:{:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>train_all_loss<span class="token punctuation">,</span>test_all_loss<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_215" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/80ed3cefbcb9ce62077d905ffd599c7b.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"></p> <pre><code class="prism language-python">net3_model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span> net3_model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net3_model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token comment">#训练批次为64，测试批次为64 </span> <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     times <span class="token operator">=</span> <span class="token number">0.0</span>     train_all_loss <span class="token operator">=</span> <span class="token number">0.0</span>     <span class="token keyword">for</span> datas<span class="token punctuation">,</span>labels <span class="token keyword">in</span> x_train_dl<span class="token punctuation">:</span>         times <span class="token operator">+=</span> <span class="token number">1</span>         datas<span class="token punctuation">,</span>labels <span class="token operator">=</span> datas<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>         train_out <span class="token operator">=</span> net3_model<span class="token punctuation">(</span>datas<span class="token punctuation">)</span>         train_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>train_out<span class="token punctuation">,</span>labels<span class="token punctuation">)</span>         train_all_loss <span class="token operator">+=</span> train_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>         train_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"split_loss:"</span><span class="token punctuation">,</span>train_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         time <span class="token operator">=</span> <span class="token number">0.0</span>         test_all_loss <span class="token operator">=</span> <span class="token number">0.0</span>         <span class="token keyword">for</span> data<span class="token punctuation">,</span>label <span class="token keyword">in</span> x_test_dl<span class="token punctuation">:</span>             time <span class="token operator">+=</span> <span class="token number">1</span>             data<span class="token punctuation">,</span>label <span class="token operator">=</span> data<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">,</span>label<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>             test_out <span class="token operator">=</span> net3_model<span class="token punctuation">(</span>data<span class="token punctuation">)</span>             test_loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>test_out<span class="token punctuation">,</span>label<span class="token punctuation">)</span>             test_all_loss <span class="token operator">+=</span> test_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch:{},train_mse:{:.4f},test_mse:{:.4f}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>train_all_loss<span class="token operator">/</span>times<span class="token punctuation">,</span>test_all_loss<span class="token operator">/</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <h2> <a id="_248" rel="nofollow"></a>结果</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221223/eb52b3eb983a27fc27fca17dbb7317f6.jpg" alt="pytorch数据批次的大小对模型拟合效果的影响"><br /> 最终可发现：批次越小整体均方误差越小；训练批次和测试批次相同或不同对整体均方误差的影响不大。</p> </p></div> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-3049.htm">Python 一网打尽＜排序算法＞之先从玩转冒泡排序开始</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-3051.htm">docker安装elastic search和kibana的实现_docker_</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3106.htm" title="我们如何使用单个MySQL UPDATE语句更新多行上的列值？">我们如何使用单个MySQL UPDATE语句更新多行上的列值？</a></li>
                        <li class="py-2"><a href="/html/category/article-3075.htm" title="springboot Jar包 秒部署到Linux服务器运行">springboot Jar包 秒部署到Linux服务器运行</a></li>
                        <li class="py-2"><a href="/html/category/article-3108.htm" title="【远程文件浏览器】Unity+Lua开发调试利器">【远程文件浏览器】Unity+Lua开发调试利器</a></li>
                        <li class="py-2"><a href="/html/category/article-3085.htm" title="MySQL在日期中添加“半年间隔”的不同方式是什么？">MySQL在日期中添加“半年间隔”的不同方式是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-3087.htm" title="C# DataTable去重，根据列名去重保留其他列">C# DataTable去重，根据列名去重保留其他列</a></li>
                        <li class="py-2"><a href="/html/category/article-3080.htm" title="通过覆盖的HTML元素<div>传递鼠标单击">通过覆盖的HTML元素<div>传递鼠标单击</a></li>
                        <li class="py-2"><a href="/html/category/article-3116.htm" title="Kafka 单机（集群）安装部署（自带zookeeper）">Kafka 单机（集群）安装部署（自带zookeeper）</a></li>
                        <li class="py-2"><a href="/html/category/article-3082.htm" title="vue elementui点击按钮新增输入框">vue elementui点击按钮新增输入框</a></li>
                        <li class="py-2"><a href="/html/category/article-3065.htm" title="JavaScript如何对二进制值数组进行排序">JavaScript如何对二进制值数组进行排序</a></li>
                        <li class="py-2"><a href="/html/category/article-3112.htm" title="30秒急速配置mybatis-plus多租户配置">30秒急速配置mybatis-plus多租户配置</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">52</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>