<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-3021.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>SpringBoot项目使用EasyPoi实现导入导出，就是这么的丝滑 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">SpringBoot项目使用EasyPoi实现导入导出，就是这么的丝滑</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<div id="content_views" class="htmledit_views"> <h1>前言</h1> <p>在项目的开发工程中，经常有导入导出数据的常见功能场景，Apache的POI是处理导入导出中最常用的，但是其原生的用法太复杂，很繁琐，总是在Copy… ，无意间发现一款简单粗暴的神器EasyPoi，EasyPoi也是基于POI的，在SpringBoot中也是做了很好的封装，让我们能够在SpringBoot 快速地使用 EasyPoi 进行开发，很方便，而且支持多种格式的导入导出。</p> <p>本篇文章就给大家介绍下EasyPoi。</p> <hr/> <h1>一、EasyPoi简介</h1> <p>EasyPoi功能如同名字easy，主打的功能就是容易,让一个没见接触过poi的人员就可以方便的写出Excel导出，Excel模板导出，Excel导入，Word模板导出，通过简单的注解和模板语言(熟悉的表达式语法)，完成以前复杂的写法。</p> <h1>二、EasyPoi主要功能</h1> <ul> <li>基于注解的导入导出，修改注解就可以修改Excel</li> <li>支持常用的样式自定义</li> <li>基于map可以灵活定义的表头字段</li> <li>支持一对多的导出，导入</li> <li>支持模板的导出，一些常见的标签,自定义标签</li> <li>支持HTML/Excel转换，如果模板还不能满足用户的变态需求，请用这个功能</li> <li>支持word的导出，支持图片、Excel</li> </ul> <h1>三、EasyPoi注解</h1> <p>easypoi起因就是Excel的导入导出，最初的模板是实体和Excel的对应，model–row，filed–col 这样利用注解我们可以和容易做到excel到导入导出。</p> <h2>1.@Excel</h2> <p>这个是必须使用的注解，如果需求简单只使用这一个注解也是可以的，涵盖了常用的Excel需求。</p> <table> <thead> <tr> <th>属性</th> <th>类型</th> <th>默认值</th> <th>功能</th> </tr> </thead> <tbody> <tr> <td>name</td> <td>String</td> <td>null</td> <td>列名</td> </tr> <tr> <td>orderNum</td> <td>String</td> <td>“0”</td> <td>列的排序</td> </tr> <tr> <td>replace</td> <td>String[]</td> <td>{}</td> <td>值的替换 {a_id,b_id}</td> </tr> <tr> <td>type</td> <td>int</td> <td>1</td> <td>导出类型 1 是文本 2 是图片,3 是函数,10 是数字 默认是文本</td> </tr> <tr> <td>exportFormat</td> <td>String</td> <td>“”</td> <td>导出的时间格式,以这个是否为空来判断是否需要格式化日期</td> </tr> <tr> <td>importFormat</td> <td>String</td> <td>“”</td> <td>导入的时间格式,以这个是否为空来判断是否需要格式化日期</td> </tr> <tr> <td>format</td> <td>String</td> <td>“”</td> <td>时间格式,相当于同时设置了exportFormat 和 importFormat</td> </tr> <tr> <td>suffix</td> <td>String</td> <td>“”</td> <td>文字后缀,如% 90 变成90%</td> </tr> <tr> <td>isHyperlink</td> <td>boolean</td> <td>false</td> <td>超链接,如果是需要实现接口返回对象</td> </tr> <tr> <td>isImportField</td> <td>boolean</td> <td>true</td> <td>校验字段,看看这个字段是不是导入的Excel中有,如果没有说明是错误的Excel,读取失败,支持name_id</td> </tr> <tr> <td>## 2.@ExcelCollection</td> <td></td> <td></td> </tr> <tr> <td>一对多的集合注解，用以标记集合是否被数据以及集合的整体排序</td> <td></td> <td></td> </tr> <tr> <td>属性</td> <td>类型</td> <td>默认值</td> <td>功能</td> </tr> <tr> <td>--------</td> <td>-----</td> <td>-------</td> <td>-----</td> </tr> <tr> <td>id</td> <td>String</td> <td>null</td> <td>定义ID</td> </tr> <tr> <td>name</td> <td>String</td> <td>null</td> <td>定义集合列名,支持nanm_id</td> </tr> <tr> <td>orderNum</td> <td>int</td> <td>0</td> <td>排序,支持name_id</td> </tr> <tr> <td>type</td> <td>Class&lt;?&gt;</td> <td>ArrayList.class</td> <td>导入时创建对象使用</td> </tr> </tbody> </table> <h1>四、开始使用</h1> <h2>1.添加依赖</h2> <pre><code class="hljs">&lt;dependency&gt;    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;    &lt;artifactId&gt;easypoi-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;4.2.0&lt;/version&gt; &lt;/dependency&gt;</code></pre> <h2>2.导入功能实现</h2> <p>首先定义需要导入的数据类型UserImportVO，并使用@Excel注解与excel列映射，导入的时候通常需要对导入的数据进行一些校验。</p> <p>EasyPoi的校验使用也很简单，对象上加上通用的校验规则，配置下需要校验就可以了，校验主要是JSR 303 规范，可结合Hibernate Validator使用：</p> <h3>2.1 UserImportVO导入类</h3> <p>导入类对象实现IExcelModel、IExcelDataModel 接口，可获取到错误校验信息。</p> <pre><code class="hljs">@Data public class UserImportVO implements Serializable,IExcelModel, IExcelDataModel {      @NotBlank     @Excel(name = "姓名")     private String realName;      @Excel(name = "性别", replace = { "男_1", "女_2" })     private Integer sex;      @Excel(name = "出生日期", format = "yyyy-MM-dd")     private Date birthday;      @Length(min=1, max=11, message = "请填写正确的手机号")     @Excel(name = "手机号码")     private String phone;      @Excel(name = "固定电话")     private String tel;      @Email(message = "请填写正确的邮箱地址")     @Excel(name = "邮箱")     private String email;      @Excel(name = "头像地址")     private String avatar;      @Excel(name = "信息")     private String errorMsg;      private Integer rowNum;      @Override     public Integer getRowNum() {         return this.rowNum;     }      @Override     public void setRowNum(Integer i) {         this.rowNum = i;     }      @Override     public String getErrorMsg() {         return this.errorMsg;     }      @Override     public void setErrorMsg(String s) {         this.errorMsg = s;     } }</code></pre> <h3>2.2 controller层</h3> <p>在编写controller层导入方法</p> <pre><code class="hljs">    @Autowired     private IUserService userService;      @PostMapping("/importExcel")     public String importExcel(@RequestParam("file") MultipartFile file) {         try {             String result = userService.importExcel(file);             return result;         } catch (Exception e) {             return "导入失败";         }     }</code></pre> <h3>2.3 service层</h3> <p>具体的实现是在service层</p> <pre><code class="hljs">   @Autowired     private UserVerifyHandler userVerifyHandler;      @Override     public String importExcel(MultipartFile file) throws Exception{         ImportParams importParams = new ImportParams();         //表格标题行数,默认0         importParams.setTitleRows(1);         //是否需要校验上传的Excel         importParams.setNeedVerify(true);         //告诉easypoi我们自定义的验证器         importParams.setVerifyHandler(userVerifyHandler);         ExcelImportResult&lt;UserImportVO&gt; result = ExcelImportUtil.importExcelMore(file.getInputStream(),UserImportVO.class,importParams);         if (!result.isVerifyFail() &amp;&amp; !CollectionUtils.isEmpty(result.getList())) {             for (UserImportVO vo : result.getList()) {                 log.info("从Excel导入数据到数据库的详细为 ：{}", vo);                 User user = new User();                 BeanUtil.copyProperties(vo,user);                 this.save(user);             }         } else {             for (UserImportVO vo : result.getFailList()) {                 log.info("校验失败的详细为 ：{}", vo);             }             return "文档校验失败";         }         return "导入成功";     }</code></pre> <h3>2.4 ImportParams 参数</h3> <p>ImportParams 参数各属性介绍</p> <table> <thead> <tr> <th>属性</th> <th>类型</th> <th>默认值</th> <th>功能</th> </tr> </thead> <tbody> <tr> <td>titleRows</td> <td>int</td> <td>0</td> <td>表格标题行数,默认0</td> </tr> <tr> <td>headRows</td> <td>int</td> <td>1</td> <td>表头行数,默认1</td> </tr> <tr> <td>startRows</td> <td>int</td> <td>0</td> <td>字段真正值和列标题之间的距离 默认0</td> </tr> <tr> <td>startSheetIndex</td> <td>int</td> <td>0</td> <td>开始读取的sheet位置,默认为0</td> </tr> <tr> <td>needVerfiy</td> <td>boolean</td> <td>false</td> <td>是否需要校验上传的Excel</td> </tr> <tr> <td>needSave</td> <td>boolean</td> <td>false</td> <td>是否需要保存上传的Excel</td> </tr> <tr> <td>saveUrl</td> <td>String</td> <td>"upload/excelUpload"</td> <td>保存上传的Excel目录,默认是 如 TestEntity这个类保存路径就是upload/excelUpload/Test/yyyyMMddHHmss* 保存名称上传时间五位随机数</td> </tr> <tr> <td>importFields</td> <td>String[]</td> <td>null</td> <td>导入时校验数据模板,是不是正确的Excel</td> </tr> <tr> <td>verifyHanlder</td> <td>IExcelVerifyHandler</td> <td>null</td> <td>校验处理接口,自定义校验</td> </tr> <tr> <td>dataHanlder</td> <td>IExcelDataHandler</td> <td>null</td> <td>数据处理接口,以此为主,replace,format都在这后面</td> </tr> </tbody> </table> <h3>2.5 自定义校验规则</h3> <p>通用的校验满足不了所有的校验，例如还需要通过查询数据库，校验数据的唯一性，此时需要自定义一个校验规则，实现IExcelVerifyHandler接口。</p> <pre><code class="hljs">@Component public class UserVerifyHandler implements IExcelVerifyHandler&lt;UserImportVO&gt; {      @Autowired     private IUserService userService;      @Override     public ExcelVerifyHandlerResult verifyHandler(UserImportVO vo) {         ExcelVerifyHandlerResult result = new ExcelVerifyHandlerResult();         //假设我们要添加用户，现在去数据库查询realName，如果存在则表示校验不通过。         User user = userService.getOne(new LambdaQueryWrapper&lt;User&gt;().eq(User::getRealName,vo.getRealName()));         if (user!=null) {             result.setMsg("唯一校验失败");             result.setSuccess(false);             return result;         }         result.setSuccess(true);         return result;     } }</code></pre> <h3>2.6 测试</h3> <p>1.使用postman工具进行导入测试，先填充一些不符合规则的数据，可以看到控制台输出的校验错误的信息。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221230/ed4a655936857e696df1249a8d070663.jpg"></p> <p>2.再填充一些符合规则的数据，可以看到导入成功，数据库成功插入数据。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221230/dbdd850910619b2ba940c913afd8c1f8.jpg"></p> <h2>3.导出功能实现</h2> <h3>3.1 UserExportVO导出类</h3> <p>导出类不需要配置校验规则，只需定义要导出的信息</p> <pre><code class="hljs">@Data public class UserExportVO implements Serializable {      @Excel(name = "姓名")     private String realName;      @Excel(name = "性别", replace = { "男_1", "女_2" }, suffix = "生")     private Integer sex;      @Excel(name = "出生日期", format = "yyyy-MM-dd")     private Date birthday;      @Excel(name = "手机号码")     private String phone;      @Excel(name = "固定电话")     private String tel;      @Excel(name = "邮箱")     private String email;      @Excel(name = "头像地址")     private String avatar;  }</code></pre> <h3>3.2 controller层</h3> <p>编写controller层导出方法</p> <pre><code class="hljs">    @GetMapping("/exportExcel")     public void export(HttpServletResponse response) {         //查询要导出的数据         List&lt;UserExportVO&gt; users = userService.getUserExportList();         ExcelUtil.exportExcelX(users, "测试导出表", "sheet1", UserExportVO.class, "测试导出表.xlsx", response);     }</code></pre> <h3>3.3 service层</h3> <p>编写service层查询需要导出的数据，把查询出来的集合转化成导出VO集合。</p> <pre><code class="hljs">	@Override     public List&lt;UserExportVO&gt; getUserExportList() {         List&lt;User&gt; users = this.list();         //users集合转成export集合         List&lt;UserExportVO&gt; exportVOList = users.stream().map(user -&gt; {             UserExportVO vo = new UserExportVO();             BeanUtils.copyProperties(user, vo);             return vo;         }).collect(Collectors.toList());         return exportVOList;     }</code></pre> <h3>3.4 测试</h3> <p>直接浏览器请求导出接口，成功导出。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads/20221230/90d9cd21adada606c9722dd11957c0b8.jpg"></p> <hr/> <h1>总结</h1> <p>好了，以上就是今天要讲的内容，感谢大家的阅读。本文仅仅简单介绍了使用EasyPoi导入导出功能的使用，而EasyPoi还提供了模板的导出、图片的导出、word的导出等等功能，</p> <p>&nbsp;</p> </p></div> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-3020.htm">vue实现自定义全局右键菜单_vue.js</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-3022.htm">如何在vue3项目中方便的引入Element plus并且进行配置注册并且方便使用</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6864.htm" title="宠物商品品牌定位（宠物商品品牌定位策略）">宠物商品品牌定位（宠物商品品牌定位策略）</a></li>
                        <li class="py-2"><a href="/html/category/article-7279.htm" title="到哪领养狗（到哪领养狗狗）">到哪领养狗（到哪领养狗狗）</a></li>
                        <li class="py-2"><a href="/html/category/article-7002.htm" title="动物疫苗使用方法视频（动物疫苗使用方法视频教程）">动物疫苗使用方法视频（动物疫苗使用方法视频教程）</a></li>
                        <li class="py-2"><a href="/html/category/article-4534.htm" title="鱼子怎么做最好吃?(鱼子怎么做简单又好吃视频)">鱼子怎么做最好吃?(鱼子怎么做简单又好吃视频)</a></li>
                        <li class="py-2"><a href="/html/category/article-7140.htm" title="猫粮机器怎么做猫粮的视频（猫粮机器怎么做猫粮的视频讲解）">猫粮机器怎么做猫粮的视频（猫粮机器怎么做猫粮的视频讲解）</a></li>
                        <li class="py-2"><a href="/html/category/article-6036.htm" title="广州宠物领养网免费吗现在（广州宠物猫领养中心）">广州宠物领养网免费吗现在（广州宠物猫领养中心）</a></li>
                        <li class="py-2"><a href="/html/category/article-6957.htm" title="宠物医生需要什么学历和专业（宠物医生需要什么学历和专业的）">宠物医生需要什么学历和专业（宠物医生需要什么学历和专业的）</a></li>
                        <li class="py-2"><a href="/html/category/article-5975.htm" title="十大快递公司品牌是哪些公司(十大快递公司品牌是哪些牌子)">十大快递公司品牌是哪些公司(十大快递公司品牌是哪些牌子)</a></li>
                        <li class="py-2"><a href="/html/category/article-6037.htm" title="成都宠物领养中心在哪（成都宠物领养中心免费）">成都宠物领养中心在哪（成都宠物领养中心免费）</a></li>
                        <li class="py-2"><a href="/html/category/article-7141.htm" title="阿博（博阿斯胡尔克）">阿博（博阿斯胡尔克）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>