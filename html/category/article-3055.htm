<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-3055.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>Eureka注册中心高可用及常用配置项 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">Eureka注册中心高可用及常用配置项</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				  			 <div id="log-box">  				<div id="catalog"><ul id="catalog-ul"> <li><i class="be be-arrowright"></i> <a href="#title-0" title="一、Eureka 的高可用搭建">一、Eureka 的高可用搭建</a></li> <li><i class="be be-arrowright"></i> <a href="#title-1" title="二、Eureka 的安全认证">二、Eureka 的安全认证</a></li> <li><i class="be be-arrowright"></i> <a href="#title-2" title="三、Eureka 的常用配置项">三、Eureka 的常用配置项</a></li> </ul><span class="log-zd"><span class="log-close"><a title="隐藏目录"><i class="be be-cross"></i><strong>目录</strong></a></span></span></div>  			</div> <div id="content_views" class="markdown_views prism-atom-one-dark"> <span class="directory"></span><h4 id="title-0">一、Eureka 的高可用搭建</h4> <p>　　在实际生产项目中，为了保证服务的可用性，连续性，一般来说，都会去搭建应用的集群来保证服务高可用。Eureka 是天生集群的，搭建配置相当简单：不论你有多少的机器部署，只要相互之间指定对方的注册中心地址就可以了。无需更多的配置项，方便，快捷。</p> <p>　　有几台机器部署 Eureka，就相互注册下关系，多个 Eureka Server 之间通过复制的方式完成注册服务的同步。本文中使用两个节点来进行模拟使用，如果三台或者更多机器的话，同理可配置。</p> <p><strong>1、创建配置文件</strong></p> <p>　 新增配置文件：application-ha02.properties、application-ha03.properties</p> <p>　application-ha02.properties 配置如下</p> <pre><code class="prism language-bash">server.port<span class="token operator">=</span><span class="token number">8082</span> spring.application.name<span class="token operator">=</span>nativeEureka eureka.environment<span class="token operator">=</span>ha02  eureka.instance.hostname<span class="token operator">=</span>server2<span class="token comment">#是否将自己作为客户端注册到注册中心：false-不注册。默认为true。集群搭建中，设置true</span> eureka.client.register-with-eureka<span class="token operator">=</span>true<span class="token comment">#是否需要从注册中心检索获取服务的注册信息。默认值为true</span><span class="token comment">#单机版的可设置成false，集群版的由于需要同步其他节点的服务注册数据，故设成true。</span> eureka.client.fetch-registry<span class="token operator">=</span>true<span class="token comment">#是否开启自我保护模式，默认值true</span><span class="token comment">#eureka server默认在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期，</span><span class="token comment">#但是在保护期内如果服务刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，此时会调用失败</span> eureka.server.enable-self-preservation<span class="token operator">=</span>false<span class="token comment">#扫描失效服务的间隔时间，单位毫秒，默认值 60 * 1000</span> eureka.server.eviction-interval-timer-in-ms<span class="token operator">=</span><span class="token number">10000</span><span class="token comment">#服务地址</span> eureka.client.service-url.defaultZone<span class="token operator">=</span> http://server3:8083/eureka/</code></pre> <p>　application-ha03.properties 配置如下</p> <pre><code class="prism language-bash">server.port<span class="token operator">=</span><span class="token number">8083</span> spring.application.name<span class="token operator">=</span>nativeEureka eureka.environment<span class="token operator">=</span>ha03  eureka.instance.hostname<span class="token operator">=</span>server3<span class="token comment">#是否将自己作为客户端注册到注册中心：false-不注册。默认为true。集群搭建中，设置true</span> eureka.client.register-with-eureka<span class="token operator">=</span>true<span class="token comment">#是否需要从注册中心检索获取服务的注册信息。默认值为true</span><span class="token comment">#单机版的可设置成false，集群版的由于需要同步其他节点的服务注册数据，故设成true。</span> eureka.client.fetch-registry<span class="token operator">=</span>true<span class="token comment">#是否开启自我保护模式，默认值true</span><span class="token comment">#eureka server默认在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期，</span><span class="token comment">#但是在保护期内如果服务刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，此时会调用失败</span> eureka.server.enable-self-preservation<span class="token operator">=</span>false<span class="token comment">#扫描失效服务的间隔时间，单位毫秒，默认值 60 * 1000</span> eureka.server.eviction-interval-timer-in-ms<span class="token operator">=</span><span class="token number">10000</span><span class="token comment">#服务地址</span> eureka.client.service-url.defaultZone<span class="token operator">=</span> http://server2:8082/eureka/</code></pre> <p>　　其中，server2、server3 为修改本地 hosts 文件。</p> <p><strong>2、分别启动服务</strong></p> <p>&nbsp;　　　　启动类&nbsp;NativeEurekaApplication 中，修改加载配置文件，分别应用 ha02 、ha03 配置文件，组建高可用：</p> <pre><code class="prism language-bash">package com.cfang<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.boot.SpringApplication<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.boot.autoconfigure.SpringBootApplication<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Profile<span class="token punctuation">;</span>  @SpringBootApplication @EnableEurekaServer public class NativeEurekaApplication<span class="token punctuation">{<!-- --></span>      public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> //        SpringApplication.run<span class="token punctuation">(</span>NativeEurekaApplication.class, args<span class="token punctuation">)</span><span class="token punctuation">;</span>         SpringApplication application<span class="token operator">=</span> new SpringApplication<span class="token punctuation">(</span>NativeEurekaApplication.class<span class="token punctuation">)</span><span class="token punctuation">;</span> //        application.setAdditionalProfiles<span class="token punctuation">(</span><span class="token string">"ha02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         application.setAdditionalProfiles<span class="token punctuation">(</span><span class="token string">"ha03"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         application.run<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>　　上面代码中，两次分别启动 ha02 和 ha03，启动两个 Eureka 注册中心。</p> <p>　　在单节点启动的时候，会持续报错&nbsp;&nbsp;Cannot execute request on any known server、Caused by: java.net.ConnectException: Connection refused: connect。此类异常消息，是因为向集群中其他 Eureka 注册服务时候，因为未开启而报错。正常可忽略，待后续逐步启动了所有 Eureka 服务后，此异常会解决消失。</p> <p><strong>3、控制台查看</strong></p> <p>　　启动好后，在 Eureka 控制台中可查看，分别访问：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://localhost:8082/"  rel="nofollow">http://server2:8082/</a>、<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://server3:8083/"  rel="nofollow">http://server3:8083/</a></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/4c6e12482170b8c456c2f31fc219c580.jpg" alt="Eureka注册中心高可用及常用配置项"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/089c19a87bd9ad0398b019dee8330a45.jpg" alt="Eureka注册中心高可用及常用配置项"></p> <p>&nbsp;　　从上面可以看出，DS Replicas、registered-replicas、available-replicas分别有了其他 Eureka 的地址，即：相互Replicate、相互注册，则说明Eureka集群成功。</p> <p><strong>4、客户端使用</strong></p> <p>　　客户端使用过程中，只需要修改配置文件中的注册中心地址就行了：</p> <pre><code class="prism language-bash">eureka.client.service-url.defaultZone<span class="token operator">=</span> http://server2:8082/eureka/,http://server3:8083/eureka/</code></pre> <p>　　有几个 Eureka 提供服务，就在后面加上就行了。重启服务，则在所有的 Eureka 上都能查看到服务注册信息。</p> <span class="directory"></span><h4 id="title-1">二、Eureka 的安全认证</h4> <p>　　Eureka 可以增加使用 用户名 和 密码 的方式进行安全访问验证。有点类似 ActiveMQ 的用户名密码认证。</p> <p><strong>1、开启认证</strong></p> <p><strong></strong>Eureka 注册中心项目&nbsp;nativeEureka 中，增加 pom 依赖：</p> <pre><code class="prism language-bash"><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-security<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span></code></pre> <p>　　新增config</p> <pre><code class="prism language-bash">package com.cfang.configuration<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Configuration<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter<span class="token punctuation">;</span>  @EnableWebSecurity @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter<span class="token punctuation">{<!-- --></span>      @Override     protected void configure<span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> throws Exception<span class="token punctuation">{<!-- --></span>         super.configure<span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>         http.csrf<span class="token punctuation">(</span><span class="token punctuation">)</span>.disable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //关闭csrf过滤         http.authorizeRequests<span class="token punctuation">(</span><span class="token punctuation">)</span>.anyRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>.authenticated<span class="token punctuation">(</span><span class="token punctuation">)</span>.and<span class="token punctuation">(</span><span class="token punctuation">)</span>.httpBasic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>　　修改配置文件&nbsp;application.properties</p> <pre><code class="prism language-bash">server.port<span class="token operator">=</span><span class="token number">8081</span> spring.application.name<span class="token operator">=</span>nativeEureka  eureka.instance.hostname<span class="token operator">=</span> server1<span class="token comment">#是否将自己作为客户端注册到注册中心：false-不注册。默认为true。</span> eureka.client.register-with-eureka<span class="token operator">=</span>false<span class="token comment">#是否需要从注册中心检索获取服务的注册信息。默认值为true</span><span class="token comment">#单机版的可设置成false，集群版的由于需要同步其他节点的服务注册数据，故设成true。</span> eureka.client.fetch-registry<span class="token operator">=</span>false<span class="token comment">#是否开启自我保护模式，默认值true</span><span class="token comment">#eureka server默认在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期，</span><span class="token comment">#但是在保护期内如果服务刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，此时会调用失败</span> eureka.server.enable-self-preservation<span class="token operator">=</span>false<span class="token comment">#扫描失效服务的间隔时间，单位毫秒，默认值 60 * 1000</span> eureka.server.eviction-interval-timer-in-ms<span class="token operator">=</span><span class="token number">10000</span><span class="token comment">#安全认证信息</span> security.basic.enabled<span class="token operator">=</span>true spring.security.user.name<span class="token operator">=</span>root spring.security.user.password<span class="token operator">=</span><span class="token number">123456</span><span class="token comment">#服务地址</span> eureka.client.service-url.defaultZone<span class="token operator">=</span> http://<span class="token variable">${spring.security.user.name}</span><span class="token builtin class-name">:</span><span class="token variable">${spring.security.user.password}</span>@server1:8081/eureka/</code></pre> <p>　　主要修改增加安全认证信息。</p> <p>　　完成以上几个步骤后，启动 Eureka 注册中心，访问<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://server1:8081/"  rel="nofollow">http://server1:8081/</a>。会弹出输入用户名、密码：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220901/a8d1014746c12eee74256de1ba3ca8f1.jpg" alt="Eureka注册中心高可用及常用配置项"></p> <p>&nbsp;　　输入配置文件中配置的用户名、密码后，登入 Eureka 控制台。</p> <p><strong>2、Eureka client 端修改</strong></p> <p>　　　　client 端，只需要修改配置文件，在注册的时候的地址信息就好了，带上认证信息：</p> <pre><code class="prism language-bash">server.port<span class="token operator">=</span><span class="token number">8701</span> spring.application.name<span class="token operator">=</span>nativefshService<span class="token comment">#是否将自己作为客户端注册到注册中心：false-不注册</span> eureka.client.register-with-eureka<span class="token operator">=</span>true<span class="token comment">#安全认证信息</span> spring.security.user.name<span class="token operator">=</span>root spring.security.user.password<span class="token operator">=</span><span class="token number">123456</span><span class="token comment">#服务地址</span><span class="token comment">#eureka.client.service-url.defaultZone= http://server2:8082/eureka/,http://server3:8083/eureka/</span> eureka.client.service-url.defaultZone<span class="token operator">=</span> http://<span class="token variable">${spring.security.user.name}</span><span class="token builtin class-name">:</span><span class="token variable">${spring.security.user.password}</span>@server1:8081/eureka/</code></pre> <p>　　如果用户名、密码配置不正确的话，服务注册失败，会报错：com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server 。</p> <span class="directory"></span><h4 id="title-2">三、Eureka 的常用配置项</h4> <p><strong>　　1、通用配置</strong></p> <p>　　　　spring.application.name=xxxxxxxxxxxxx ：应用名称配置，将会出现在 Eureka 注册中心 Application 列</p> <p>　　　　server.port=8701 ：应用端口，默认值为 8761</p> <p>　　　　eureka.instance.hostname= server1 ：服务注册中心应用实例主机名</p> <p>　　　　eureka.<span class="hljs-keyword">instance.ip-address=1<span class="hljs-number">27.0<span class="hljs-number">.0<span class="hljs-number">.1 ：应用实例ip</span></span></span></span></p> <p><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">　　　　eureka.<span class="hljs-keyword">instance.prefer-ip-address=false ：</span></span></span></span></span>客户端向注册中心注册时，相较于 hostname 是否有限使用 ip。在服务中心注册后，鼠标放到服务的&nbsp;Status 列的链接上，无需点击，左下角能看出配置的变化。</p> <p>　　　　eureka.instance.environment=dev ：该实例的环境配置</p> <p>　　　　eureka.client.register-with-eureka=false ：是否将自己注册到 Eureka 注册中心。单机情况下的 Eureka Server 不需要注册，集群的 Eureka Server 以及 Eureka Client 需要注册。默认值 true</p> <p>　　　　eureka.client.fetch-registry=false ：是否需要从注册中心检索获取服务的注册信息。单机情况下的 Eureka Server 不需要获取。集群的 Eureka Server 以及 Eureka Client 需要获取。默认值 true</p> <p>　　　　eureka.client.service-url.defaultZone= http://${spring.security.user.name}:${spring.security.user.password}@server1:8081/eureka/ ：Eureka 服务的地址信息，中间的占位符为安全认证开启时使用，如果 Eureka Server 为集群状态，则逗号分隔，依次书写即可。</p> <p><strong>2、Eureka Server 配置</strong></p> <p>　　　　eureka.server.enable-self-preservation = false ：是否开启自我保护模式，eureka server默认在运行期间会去统计心跳失败比例在 15 分钟之内是否低于 85%，如果低于 85%，Eureka Server 会将这些实例保护起来，让这些实例不会过期，但是在保护期内如果服务刚好这个服务提供者非正常下线了，此时服务消费者就会拿到一个无效的服务实例，此时会调用失败。默认 true</p> <p>　　　　eureka.server.eviction-interval-timer-in-ms=10000 ：扫描失效服务的时间间隔。单位 毫秒。 默认值 60 * 1000</p> <p>　　　　security.basic.enabled=true ：开启 Eureka 安全认证</p> <p>　　　　spring.security.user.name=root ：安全认证用户名</p> <p>　　　　spring.security.user.password=123456 ：安全认证密码</p> <p><strong>3、Eureka Client 配置</strong></p> <p>　　　　eureka.client.registry-fetch-interval-seconds=30 ：客户端获取服务注册信息时间间隔，单位 秒。默认 30</p> <p><span class="hljs-title">eureka.<span class="hljs-keyword">instance.appname=eureka-client ：服务名，默认取 spring.application.name 配置值，如果没有则为 unknown</span></span></p> <p><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title">eureka.<span class="hljs-keyword">instance.lease-expiration-duration-<span class="hljs-keyword">in-seconds=<span class="hljs-number">90 ：服务的失效时间，失效的服务将被注册中心删除。时间间隔为最后一次注册中心接收到的心跳时间。单位 秒，默认 90</span></span></span></span></span></span></p> <p><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title">eureka.<span class="hljs-keyword">instance.lease-renewal-interval-<span class="hljs-keyword">in-seconds=<span class="hljs-number">30 ：应用实例给注册中心发送心跳的间隔时间，用于表明该服务实例可用。单位 秒。默认30</span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span></p> <p><em><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span></em><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number">eureka.client.eureka-server-connect-timeout-seconds=5 ：client 连接 Eureka 注册中心的超时时间，单位 秒，默认 5</span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span></p> <p><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number">eureka.client.eureka-server-read-timeout-seconds=</span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number">8 ：client 对 Eureka 服务器读取信息的超时时间，单位 秒，默认 8</span></span></span></span></span></span></span></span></span></span></span></p> <p><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number">　　　　eureka.client.eureka-connection-idle-timeout-seconds=30 ：client 连接 Eureka 服务端后空闲等待时间，单位 秒，默认 30</span></span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span></span></p> <p><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number">eureka.client.eureka-server-total-connections=</span></span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">200 ：client 到 所有Eureka 服务端的连接总数，默认 200</span></span></span></span></span></span></span></span></span></span></span></span><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number"></span></span></span></span></span></span></span></span></span></span></span></span></p> <p><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-title"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-number"><span class="hljs-number"><span class="hljs-number">　　　　eureka.client.eureka-server-total-connections-per-host=<span class="hljs-number">50 ：client 到 Eureka 单服务端的连接总数，默认 50</span></span></span></span></span></span></span></span></span></span></span></span></span></p> </div> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-3054.htm">0501-使用Python访问Kerberos环境下的Kafka(二)</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-3056.htm">docker故障大全</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4087.htm" title="win11系统怎么安装TPM诊断">win11系统怎么安装TPM诊断</a></li>
                        <li class="py-2"><a href="/html/category/article-3104.htm" title="Java详细讲解不同版本的接口语法和抽象类与接口的区别_java">Java详细讲解不同版本的接口语法和抽象类与接口的区别_java</a></li>
                        <li class="py-2"><a href="/html/category/article-3080.htm" title="通过覆盖的HTML元素<div>传递鼠标单击">通过覆盖的HTML元素<div>传递鼠标单击</a></li>
                        <li class="py-2"><a href="/html/category/article-3089.htm" title="SpringMVC中RequestMapping注解【作用、出现的位置、属性】">SpringMVC中RequestMapping注解【作用、出现的位置、属性】</a></li>
                        <li class="py-2"><a href="/html/category/article-3075.htm" title="springboot Jar包 秒部署到Linux服务器运行">springboot Jar包 秒部署到Linux服务器运行</a></li>
                        <li class="py-2"><a href="/html/category/article-3095.htm" title="快速了解Spring，简明Spring使用流程 &#8211; FITA _在线工具">快速了解Spring，简明Spring使用流程 &#8211; FITA _在线工具</a></li>
                        <li class="py-2"><a href="/html/category/article-3087.htm" title="C# DataTable去重，根据列名去重保留其他列">C# DataTable去重，根据列名去重保留其他列</a></li>
                        <li class="py-2"><a href="/html/category/article-3076.htm" title="vue使用store">vue使用store</a></li>
                        <li class="py-2"><a href="/html/category/article-4088.htm" title="Amazing巧用 CSS 视差实现酷炫交互动效详解">Amazing巧用 CSS 视差实现酷炫交互动效详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3083.htm" title="kafka消费者执行异常重复消费_Kafka消费者的使用和原理">kafka消费者执行异常重复消费_Kafka消费者的使用和原理</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>