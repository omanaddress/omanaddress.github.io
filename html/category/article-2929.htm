<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2929.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>基于Apache组件，分析对象池原理 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">基于Apache组件，分析对象池原理</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<blockquote> <p>池塘里养：Object；</p> </blockquote> <h1 id="一设计与原理">一、设计与原理</h1> <h2 id="1基础案例">1、基础案例</h2> <p>首先看一个基于<code>common-pool2</code>对象池组件的应用案例，主要有工厂类、对象池、对象三个核心角色，以及池化对象的使用流程：</p> <pre><code class="language-java">import org.apache.commons.pool2.BasePooledObjectFactory; import org.apache.commons.pool2.PooledObject; import org.apache.commons.pool2.impl.DefaultPooledObject; import org.apache.commons.pool2.impl.GenericObjectPool; import org.apache.commons.pool2.impl.GenericObjectPoolConfig; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  public class ObjPool {     public static void main(String[] args) throws Exception {         // 声明对象池         DevObjPool devObjPool = new DevObjPool() ;         // 池中借用对象         DevObj devObj = devObjPool.borrowObject();         System.out.println("Idle="+devObjPool.getNumIdle()+"；Active="+devObjPool.getNumActive());         // 使用对象         devObj.devObjInfo();         // 归还给对象池         devObjPool.returnObject(devObj);         System.out.println("Idle="+devObjPool.getNumIdle()+"；Active="+devObjPool.getNumActive());         // 查看对象池         System.out.println(devObjPool.listAllObjects());     } } /**  * 对象定义  */ class DevObj {     private static final Logger logger = LoggerFactory.getLogger(DevObj.class) ;     public DevObj (){         logger.info("build...dev...obj");     }     public void devObjInfo (){         logger.info("dev...obj...info");     } } /**  * 对象工厂  */ class DevObjFactory extends BasePooledObjectFactory&lt;DevObj&gt; {     @Override     public DevObj create() throws Exception {         // 创建对象         return new DevObj() ;     }     @Override     public PooledObject&lt;DevObj&gt; wrap(DevObj devObj) {         // 池化对象         return new DefaultPooledObject&lt;&gt;(devObj);     } } /**  * 对象池  */ class DevObjPool extends GenericObjectPool&lt;DevObj&gt; {     public DevObjPool() {         super(new DevObjFactory(), new GenericObjectPoolConfig&lt;&gt;());     } }</code></pre> <p>案例中对象是完全自定义的；对象工厂中则重写两个核心方法：创建和包装，以此创建池化对象；对象池的构建依赖定义的对象工厂，配置采用组件提供的常规配置类；可以通过调整对象实例化的时间以及创建对象的个数，初步理解对象池的原理。</p> <h2 id="2接口设计">2、接口设计</h2> <p><strong>1.1 PooledObjectFactory 接口</strong></p> <ul> <li>工厂类，负责对象实例化，创建、验证、销毁、状态管理等；</li> <li>案例中<code>BasePooledObjectFactory类</code>则是该接口的基础实现；</li> </ul> <p><strong>1.2 ObjectPool 接口</strong></p> <ul> <li>对象池，并且继承<code>Closeable</code>接口，管理对象生命周期，以及活跃和空闲对象的数据信息获取；</li> <li>案例中<code>GenericObjectPool类</code>是对于该接口的实现，并且是可配置化的方式；</li> </ul> <p><strong>1.3 PooledObject 接口</strong></p> <ul> <li>池化对象，基于包装类被维护在对象池中，并且维护一些附加信息用来跟踪，例如时间、状态；</li> <li>案例中采用<code>DefaultPooledObject</code>包装类，实现该接口并且线程安全，注意工厂类中的重写；</li> </ul> <h2 id="3运行原理">3、运行原理</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8c4653519b9dac935e2606d721c28ed1.jpg" alt="基于Apache组件，分析对象池原理"></p> <p>通过对象池获取对象，可能是通过工厂新创建的，也可能是空闲的对象；当对象获取成功且使用完成后，需要归还对象；在案例执行过程中，不断查询对象池中空闲和活跃对象的数量，用来监控池的变化。</p> <h1 id="二构造分析">二、构造分析</h1> <h2 id="1对象池">1、对象池</h2> <pre><code class="language-java">public GenericObjectPool(final PooledObjectFactory&lt;T&gt; factory,final GenericObjectPoolConfig&lt;T&gt; config);</code></pre> <p>在完整的构造方法中，涉及到三个核心对象：工厂对象、配置对象、双端阻塞队列；通过这几个对象创建一个新的对象池；在config中提供了一些简单的默认配置：例如maxTotal、maxIdle、minIdle等，也可以扩展自定义配置；</p> <h2 id="2双端队列">2、双端队列</h2> <pre><code class="language-java">private final LinkedBlockingDeque&lt;PooledObject&lt;T&gt;&gt; idleObjects; public GenericObjectPool(final PooledObjectFactory&lt;T&gt; factory,final GenericObjectPoolConfig&lt;T&gt; config) {     idleObjects = new LinkedBlockingDeque&lt;&gt;(config.getFairness()); }</code></pre> <p>LinkedBlockingDeque支持在队列的首尾操作元素，例如添加和移除等；操作需要通过主锁进行加锁，并且基于两个状态锁进行协作；</p> <pre><code class="language-java">// 队首节点 private transient LinkedBlockingDeque.Node&lt;E&gt; first; // 队尾节点 private transient LinkedBlockingDeque.Node&lt;E&gt; last; // 主锁 private final InterruptibleReentrantLock lock; // 非空状态锁 private final Condition notEmpty; // 未满状态锁 private final Condition notFull;</code></pre> <p>关于链表和队列的特点，在之前的文章中有单独分析过，此处的源码在JDK的容器中也很常见，这里不在赘述，对象池的整个构造有大致轮廓之后，下面再来细看对象的管理逻辑。</p> <h1 id="三对象管理">三、对象管理</h1> <h2 id="1添加对象">1、添加对象</h2> <p>创建一个新对象并且放入池中，通常应用在需要<strong>预加载</strong>的场景中；涉及到两个核心操作：工厂创建对象，对象池化管理；</p> <pre><code class="language-java">public void GenericObjectPool.addObject() throws Exception ;</code></pre> <h2 id="2借用对象">2、借用对象</h2> <pre><code class="language-java">public T GenericObjectPool.borrowObject(final long borrowMaxWaitMillis) throws Exception ;</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/99315af27b29e90c9c574ffc189332d4.jpg" alt="基于Apache组件，分析对象池原理"></p> <p>首先从队列中获取对象；如果没有获取到，调用工厂创建方法，之后池化管理；对象获取之后会改变状态为<code>ALLOCATED</code>使用中；最后经过工厂的确认，完成对象获取动作；</p> <h2 id="3归还对象">3、归还对象</h2> <pre><code class="language-java">public void GenericObjectPool.returnObject(final T obj) ；</code></pre> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7092b6061a2c9e93db1716f0337d6ae5.jpg" alt="基于Apache组件，分析对象池原理"></p> <p>归还对象的时候，首先转换为池化对象和标记<code>RETURNING</code>状态；经过多次校验判断，如果失败则销毁该对象，并重新维护对象池中可用的空闲对象；最终对象被标记为空闲状态，如果不超出最大空闲数，则对象被放到队列的某一端；</p> <h2 id="4对象状态">4、对象状态</h2> <p>关于池化对象的状态在<code>PooledObjectState</code>类中有枚举和描述，在图中只是对部分几个状态流转做示意，更多细节可以参考状态类；</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/9e7f3382c63af1215475e9bce14ad8e8.jpg" alt="基于Apache组件，分析对象池原理"></p> <p>可以参考在上述案例中使用到的<code>DefaultPooledObject</code>默认池化对象类中相关方法，结合状态枚举，可以理解不同状态之间的校验和转换。</p> <h1 id="四redis应用">四、Redis应用</h1> <p>Lettuce作为Redis高级的客户端组件，通信层使用Netty组件，并且是线程安全，支持同步和异步模式，支持集群和哨兵模式；作为当下项目中常用的配置，其底层对象池基于<code>common-pool2</code>组件。</p> <h2 id="1配置管理">1、配置管理</h2> <p>基于如下配置即表示采用Lettuce组件，其中涉及到池的几个参数配置：最小空闲、最大活跃、最大空闲；这里可以对比GenericObjectPoolConfig中的配置：</p> <pre><code class="language-yaml">spring:   redis:     host: ${REDIS_HOST:127.0.0.1}     lettuce:       pool:         min-idle: 10         max-active: 100         max-idle: 100</code></pre> <h2 id="2源码分析">2、源码分析</h2> <p>围绕对象池的特点，自然去追寻源码中关于：配置、工厂、对象几个核心的角色类；从上述配置参数切入，可以很容易发现如下几个类：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/adf7d9a2df04c1bee2d1ad7d152e0a45.jpg" alt="基于Apache组件，分析对象池原理"></p> <p><strong>2.1 配置转换</strong></p> <pre><code class="language-java">// 连接配置 class LettuceConnectionConfiguration extends RedisConnectionConfiguration {     private static class PoolBuilderFactory {         // 构建对象池配置         private GenericObjectPoolConfig&lt;?&gt; getPoolConfig(RedisProperties.Pool properties) {             GenericObjectPoolConfig&lt;?&gt; config = new GenericObjectPoolConfig&lt;&gt;();             config.setMaxTotal(properties.getMaxActive());             config.setMaxIdle(properties.getMaxIdle());             config.setMinIdle(properties.getMinIdle());             return config;         }     } }</code></pre> <p>这里将配置文件中Redis的相关参数，构建到GenericObjectPoolConfig类中，即配置加载过程；</p> <p><strong>2.2 对象池构造</strong></p> <pre><code class="language-java">class LettucePoolingConnectionProvider implements LettuceConnectionProvider {     // 对象池核心角色     private final GenericObjectPoolConfig poolConfig;     private final BoundedPoolConfig asyncPoolConfig;     private final Map&lt;Class&lt;?&gt;, GenericObjectPool&gt; pools = new ConcurrentHashMap(32);     LettucePoolingConnectionProvider(LettuceConnectionProvider provider, LettucePoolingClientConfiguration config) {         this.poolConfig = clientConfiguration.getPoolConfig();         this.asyncPoolConfig = CommonsPool2ConfigConverter.bounded(this.config);     } }</code></pre> <p>在构造方法中获取对象池的配置信息，这里并没有直接实例化池对象，而是采用ConcurrentHashMap容器来动态维护；</p> <p><strong>2.3 对象管理</strong></p> <pre><code class="language-java">class LettucePoolingConnectionProvider implements LettuceConnectionProvider {     // 获取Redis连接     public &lt;T extends StatefulConnection&lt;?, ?&gt;&gt; T getConnection(Class&lt;T&gt; connectionType) {         GenericObjectPool pool = (GenericObjectPool)this.pools.computeIfAbsent();         StatefulConnection&lt;?, ?&gt; connection = (StatefulConnection)pool.borrowObject();     }     // 释放Redis连接     public void release(StatefulConnection&lt;?, ?&gt; connection) {         GenericObjectPool&lt;StatefulConnection&lt;?, ?&gt;&gt; pool = (GenericObjectPool)this.poolRef.remove(connection);     } }</code></pre> <p>在获取池对象时，如果不存在则根据相关配置创建池对象，并维护到Map容器中，然后从池中借用Redis连接对象；释放对象时首先判断对象所属的池，将对象归还到相应的池中。</p> <p><strong>最后总结</strong>，本文从对象池的一个简单案例切入，主要分析<code>common-pool2</code>组件关于：池、工厂、配置、对象管理几个角色的源码逻辑，并且参考其在Redis中的实践，只是冰山一角，像这种通用型并且应用范围广的组件，很值得时常去读一读源码，真的令人惊叹其鬼斧天工的设计。</p> <h1 id="五参考源码">五、参考源码</h1> <pre><code>应用仓库： https://gitee.com/cicadasmile/butte-flyer-parent  组件封装： https://gitee.com/cicadasmile/butte-frame-parent</code></pre> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2928.htm">socket.io在egg+vue中的使用</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2930.htm">vue项目实战精粹汇总</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4313.htm" title="猫怎么驱虫正确方法（猫怎样驱虫?）">猫怎么驱虫正确方法（猫怎样驱虫?）</a></li>
                        <li class="py-2"><a href="/html/category/article-3111.htm" title="vue实现拖拽窗口功能_vue.js">vue实现拖拽窗口功能_vue.js</a></li>
                        <li class="py-2"><a href="/html/category/article-4087.htm" title="win11系统怎么安装TPM诊断">win11系统怎么安装TPM诊断</a></li>
                        <li class="py-2"><a href="/html/category/article-3104.htm" title="Java详细讲解不同版本的接口语法和抽象类与接口的区别_java">Java详细讲解不同版本的接口语法和抽象类与接口的区别_java</a></li>
                        <li class="py-2"><a href="/html/category/article-3109.htm" title="C++内存泄漏的定位方法总结">C++内存泄漏的定位方法总结</a></li>
                        <li class="py-2"><a href="/html/category/article-3090.htm" title="Uniapp实现自定义组件">Uniapp实现自定义组件</a></li>
                        <li class="py-2"><a href="/html/category/article-3141.htm" title="Android项目封装一个登录页隐私协议弹窗工具包(一)">Android项目封装一个登录页隐私协议弹窗工具包(一)</a></li>
                        <li class="py-2"><a href="/html/category/article-3081.htm" title="你的编程能力从什么时候开始突飞猛进? 我的回答：2013年，我开始喜欢编程了。">你的编程能力从什么时候开始突飞猛进? 我的回答：2013年，我开始喜欢编程了。</a></li>
                        <li class="py-2"><a href="/html/category/article-3107.htm" title="Netty之非阻塞处理">Netty之非阻塞处理</a></li>
                        <li class="py-2"><a href="/html/category/article-3099.htm" title="springboot docker 分层打包镜像，精减变动体积">springboot docker 分层打包镜像，精减变动体积</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>