<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2907.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>数据结构与算法知识点总结数组与链表 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">数据结构与算法知识点总结数组与链表</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<p><span style="font-size: 18px"><strong><span style="font-family: "Microsoft YaHei""></span></strong></span></p> <h2 id="21-单链表">1. 动态数组</h2> <p>　　它的基本思路是使用如malloc/free等内存分配函数得到一个指向一大块内存的指针，以数组的方式引用这块内存或者直接调用动态数组的接口，根据其内部的实现机制自行扩充空间，动态增长并能快速地清空数组，对数据进行排序和遍历。</p> <p>　　它的数据结构定义如下:</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">data;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> capacity;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> index;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> type_size;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">); } array_t;</span></pre> </div> <ul> <li>data表示: 指向一块连续内存的指针;type_size: 元素类型的大小(动态执行时才能确定类型)</li> <li>capacity: 动态数组的容量大小，最大可用空间 ; index: 动态数组的实际大小</li> <li><code>int (*comp)(const void *,const void *)</code>: 元素的大小比较函数,comp为函数指针</li> </ul> <h2 id="21-单链表">2. 链表</h2> <p>　　链式存储是最通用的存储方式之一，它不要求逻辑上的相邻的元素物理位置上相邻，仅通过链接关系建立起来。链表解决了顺序表需要大量的连续存储空间的缺点，但链表附加指针域，也带来了浪费存储空间的缺点。</p> <p>　　它有多种多样的结构，如:</p> <ul> <li>只含一个指针域的单链表、</li> <li>含指向前后结点两个指针域的双链表</li> <li>首尾相连的循环链表（单向或双向）</li> <li>块状链表(chunklist)</li> <li>跳跃链表</li> </ul> <p><strong>　　A 单链表</strong><br />　　对于链表这种结构，有时候第一个节点可能会被删除或者在之前添加一个节点，使得头指针指向的节点有所改变。消除这些特殊情况的方法是在链表的第一个节点前存储一个永远不会被删除的虚拟节点,我们称之为头节点，头结点的数据域可以不设任何信息也可以记录表长等信息。</p> <p>　　头结点的指针域指向的是真正的第一个节点，从实现中可以看到它极大地简化了插入和删除操作，也避免了在C中使用二级指针跟踪记录头指针的变化。为了比较使用头结点和不使用头结点的区别，<strong>实现的单链表采取不使用头结点的方法，双向循环链表使用头结点</strong>，加深对链表操作的理解。</p> <p><strong>　　B 块状链表</strong><br />　　对于块状链表来说，它本身是一个链表，但链表存储的每个结点是一个数组。如果数组有序，结合链表的顺序遍历(链表是非随机访问的)和有序数组的折半查找可以加快数据的查找速度，在某些情况下对于特殊的插入或删除，它的时间复杂度<code>O(n^(1/2))</code><br />　　并且相对于普通链表来说节省内存，因为它不用保存指向每一个数据结点的指针。</p> <p><strong>　　C 跳表</strong><br />　　对于跳跃链表，它是一种随机化的数据结构，在有序的链表上增加附加的前进链接，增加是以随机化的方式进行的，所以列表的查找可以快速跳过部分列表而得名。在实际中它的工作性能很好 ，这种随机化平衡方案比在平衡二叉树中用到的确定性平衡方案更容易实现，并且在并行计算中也很有用。</p> <h2 id="21-单链表"><span style="font-size: 16px">2.1 单链表</span></h2> <p>　　链表中节点类型描述如下:</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> list_node {</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">struct</span> list_node *<span style="color: rgba(0, 0, 0, 1)">next; } list_node_t;</span></pre> </div> <p>　　对应地，单链表的数据结构定义如下:</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> slist {     list_node_t</span>*<span style="color: rgba(0, 0, 0, 1)">head;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">); } slist_t;</span></pre> </div> <p>　　这里的head指针既可以定义为头指针，指向链表的第一个节点，即空表初始化为NULL；它也可以定义为虚拟的头结点，分配一个节点的内存，它的指针域指向链表的实际结点。这里先使用不带头结点的方法实现单链表的操作</p> <h3 id="211-单链表的插入和删除操作"><span style="font-size: 15px">2.1.1 单链表的插入和删除操作</span></h3> <p><span style="font-size: 14px"><strong>A 单链表的删除操作</strong></span><br />　　如果在链表尾部插入，要考虑如果链表为空的话尾部的插入同样需要更新头指针，它的实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在单链表尾部添加元素</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> slist_push_back(slist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item) {</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">构造新结点</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     list_node_t</span>*node=<span style="color: rgba(0, 0, 0, 1)">new_list_node(item);</span><span style="color: rgba(0, 0, 255, 1)">if</span>(l-><span style="color: rgba(0, 0, 0, 1)">head){         list_node_t</span>*cur=l-><span style="color: rgba(0, 0, 0, 1)">head;</span><span style="color: rgba(0, 0, 255, 1)">while</span>(cur-><span style="color: rgba(0, 0, 0, 1)">next){             cur</span>=cur-><span style="color: rgba(0, 0, 0, 1)">next;         }         cur</span>->next=<span style="color: rgba(0, 0, 0, 1)">node;     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {         l</span>->head=<span style="color: rgba(0, 0, 0, 1)">node;     }     l</span>->n++<span style="color: rgba(0, 0, 0, 1)">;  }</span></pre> </div> <p>　　在链表头部添加元素比较简单，实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在单链表头部添加元素</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> slist_push_front(slist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item) {     list_node_t</span>*node=<span style="color: rgba(0, 0, 0, 1)">new_list_node(item);     node</span>->next=l-><span style="color: rgba(0, 0, 0, 1)">head;     l</span>->head=node;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">无需区分头指针是否为空，情形一样</span>     l->n++<span style="color: rgba(0, 0, 0, 1)">; }</span></pre> </div> <p>　　因而如果插入的节点是链表的第i个位置，就需要讨论插入的情形: 头部插入、尾部插入、中间插入，这里不给出具体实现。</p> <p><strong>B 单链表的删除操作</strong><br />　　如果在链表尾部删除元素，分两种情形删除: 链表只有一个节点时、链表不止一个结点。对于含有多个结点的链表，需要维持一个prev指针记录尾部元素的上一个结点再进行删除操作。实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在单链表尾部删除元素,若存在，返回被删除的元素键值，否则返回NULL</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> *slist_pop_back(slist_t *<span style="color: rgba(0, 0, 0, 1)">l) {     list_node_t</span>*cur,*<span style="color: rgba(0, 0, 0, 1)">prev;</span><span style="color: rgba(0, 0, 255, 1)">if</span>(l-><span style="color: rgba(0, 0, 0, 1)">head){</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">res_item;</span><span style="color: rgba(0, 0, 255, 1)">if</span>(l->head->next){<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">不止一个结点</span>             prev=l-><span style="color: rgba(0, 0, 0, 1)">head;             cur</span>=l->head-><span style="color: rgba(0, 0, 0, 1)">next;</span><span style="color: rgba(0, 0, 255, 1)">while</span>(cur-><span style="color: rgba(0, 0, 0, 1)">next){                  prev</span>=<span style="color: rgba(0, 0, 0, 1)">cur;                 cur</span>=cur-><span style="color: rgba(0, 0, 0, 1)">next;             }             prev</span>->next=<span style="color: rgba(0, 0, 0, 1)">NULL;         }</span><span style="color: rgba(0, 0, 255, 1)">else</span> {<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">只有一个节点</span>             cur=l-><span style="color: rgba(0, 0, 0, 1)">head;             l</span>->head=<span style="color: rgba(0, 0, 0, 1)">NULL;         }         res_item</span>=cur-><span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">free</span><span style="color: rgba(0, 0, 0, 1)">(cur);         l</span>->n--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res_item;     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL; }</span></pre> </div> <p>　　在链表头部删除元素比较简单，实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在单链表头部删除元素，若存在返回被删除的元素键值，否则返回NULL</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> *slist_pop_front(slist_t *<span style="color: rgba(0, 0, 0, 1)">l) {     list_node_t</span>*<span style="color: rgba(0, 0, 0, 1)">cur;</span><span style="color: rgba(0, 0, 255, 1)">if</span>(l-><span style="color: rgba(0, 0, 0, 1)">head){         cur</span>=l-><span style="color: rgba(0, 0, 0, 1)">head;         l</span>->head=l->head-><span style="color: rgba(0, 0, 0, 1)">next;</span><span style="color: rgba(0, 0, 255, 1)">void</span> *res_item=cur-><span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">free</span><span style="color: rgba(0, 0, 0, 1)">(cur);         l</span>->n--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res_item;     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL; }</span></pre> </div> <p>　　另外一个删除操作是：删除单链表中第一个含item值的节点，它的实现和尾部删除类似，同样需要讨论删除情形。具体实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在单链表中找到第一个含item值的节点并删除此节点</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> *slist_delete(slist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item) {     list_node_t</span>*cur,*<span style="color: rgba(0, 0, 0, 1)">prev;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">);     comp</span>=l-><span style="color: rgba(0, 0, 0, 1)">comp;     prev</span>=<span style="color: rgba(0, 0, 0, 1)">NULL;     cur</span>=l-><span style="color: rgba(0, 0, 0, 1)">head;</span><span style="color: rgba(0, 0, 255, 1)">while</span><span style="color: rgba(0, 0, 0, 1)">(cur){</span><span style="color: rgba(0, 0, 255, 1)">int</span> cmp_res=comp(item,cur-><span style="color: rgba(0, 0, 0, 1)">item);</span><span style="color: rgba(0, 0, 255, 1)">if</span>(cmp_res==<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;         }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {             prev</span>=<span style="color: rgba(0, 0, 0, 1)">cur;             cur</span>=cur-><span style="color: rgba(0, 0, 0, 1)">next;         }     }</span><span style="color: rgba(0, 0, 255, 1)">if</span>(cur==NULL){<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">该键值不存在或者链表为空</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL;     }</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 0, 255, 1)">if</span>(prev==NULL)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">删除的是第一个节点</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> slist_pop_front(l);</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 0, 1)"> {             prev</span>->next=cur-><span style="color: rgba(0, 0, 0, 1)">next;</span><span style="color: rgba(0, 0, 255, 1)">void</span> *res_item=cur-><span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">free</span><span style="color: rgba(0, 0, 0, 1)">(cur);             l</span>->n--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res_item;         }     } }</span></pre> </div> <h2 id="22-双向循环链表"><span style="font-size: 16px">2.2 双向循环链表</span></h2> <p>　　双向循环链表中的节点类型描述如下:</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> dlist_node {</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">struct</span> dlist_node *<span style="color: rgba(0, 0, 0, 1)">prev;</span><span style="color: rgba(0, 0, 255, 1)">struct</span> dlist_node *<span style="color: rgba(0, 0, 0, 1)">next; } dlist_node_t;</span></pre> </div> <p>　　对应地，双向循环链表的数据结构定义如下:</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {     dlist_node_t</span>*<span style="color: rgba(0, 0, 0, 1)">head;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">); } dlist_t;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">创建一个元素节点，让头尾都指向自己并设元素值</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">static</span> inline dlist_node_t *new_dlist_node(<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item){     dlist_node_t</span>*node=<span style="color: rgba(0, 0, 255, 1)">malloc</span>(<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(dlist_node_t));     node</span>->prev=node->next=<span style="color: rgba(0, 0, 0, 1)">node;     node</span>->item=<span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> node; }</span></pre> </div> <p>　　在双向循环链表的实现中，使用的head指针为虚拟的头结点，实现方式如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*  * 为双向循环链表分配内存,两种思路:  * 不带头节点，通过判断l->head是否为NULL来删除链表  * 带头节点，只需判断cur=l->head->next与l->head的是否相等(l->head==l->head->next才为链表空)  * 单链表实现中使用了不带头节点的办法(注释说明的头结点只是链表头指针)，双向链表我使用带头节点的思路  * 也是为了比较这两种方法哪个适合简化插入和删除操作</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)"> dlist_t</span>*dlist_alloc(<span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">)){     dlist_t</span>*l=<span style="color: rgba(0, 0, 255, 1)">malloc</span>(<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(dlist_t));     l</span>->head=<span style="color: rgba(0, 0, 0, 1)">new_dlist_node(NULL);      l</span>->n=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;     l</span>->comp=<span style="color: rgba(0, 0, 0, 1)">comp;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> l; }</span></pre> </div> <p>　　从后面的实现可以看出它极大简化了链表的插入和删除操作。</p> <h3 id="221-循环双链表的插入和删除操作"><span style="font-size: 15px">2.2.1 循环双链表的插入和删除操作</span></h3> <p>　　由于使用的是带头结点的循环双链表，它判空的标志是<code>l->head==l->head->next</code>，一定要明确，这是判断遍历是否结束的标记。</p> <p><strong>A 查找循环双链表中第i个位置的结点</strong><br />　　为了简化插入和删除操作，假设第0个位置的节点为虚拟的头结点(很关键)，使得插入和删除完全统一起来实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">查找双链表第pos个位置的节点，pos从0开始</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)"> dlist_node_t</span>*dlist_find_pos(dlist_t *l,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> pos){</span><span style="color: rgba(0, 0, 255, 1)">if</span>(pos<<span style="color: rgba(128, 0, 128, 1)">0</span> ||pos>l-><span style="color: rgba(0, 0, 0, 1)">n){         printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Invalid position to find!\n</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL;      }</span><span style="color: rgba(0, 0, 255, 1)">if</span>(pos==<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">return</span> l->head;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">头部插入，关键点，使得所有插入统一化了</span><span style="color: rgba(0, 0, 0, 1)">    }      dlist_node_t</span>*cur=l->head-><span style="color: rgba(0, 0, 0, 1)">next;</span><span style="color: rgba(0, 0, 255, 1)">int</span> j=<span style="color: rgba(128, 0, 128, 1)">1</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">计数从1开始表示</span><span style="color: rgba(0, 0, 255, 1)">while</span>(cur!=l->head){<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">链表为空的标志</span><span style="color: rgba(0, 0, 255, 1)">if</span>(j==<span style="color: rgba(0, 0, 0, 1)">pos){</span><span style="color: rgba(0, 0, 255, 1)">break</span><span style="color: rgba(0, 0, 0, 1)">;         }         cur</span>=cur-><span style="color: rgba(0, 0, 0, 1)">next;         j</span>++<span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> cur; }</span></pre> </div> <p><strong>B 插入操作</strong><br />　　在双向循环链表某位置添加元素，可插入的pos范围:<code>0-l->n</code></p> <ul> <li>pos为0时表示头部插入</li> <li>pos为<code>l->n</code>时表示尾部插入</li> </ul> <p>　　关于双链表的插入方式，tmp指针要插入在cur指针后,要么两节点前驱后后继同时链上，要么先链一个方向再链另外一个方向，方式不同效果相同。实现的技巧就在于基于位置查找的函数在pos=0时返回头指针，使得插入任何位置都使用统一的代码。 实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span> dlist_insert(dlist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *item,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> pos){</span><span style="color: rgba(0, 0, 255, 1)">if</span>(pos<<span style="color: rgba(128, 0, 128, 1)">0</span>|| pos>l-><span style="color: rgba(0, 0, 0, 1)">n){         printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Invalid position</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)">;     }     dlist_node_t</span>*cur=dlist_find_pos(l,pos);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">定位到pos位置的节点</span>     dlist_node_t *tmp=new_dlist_node(item); ;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">插入到pos位置的新节点</span>     tmp->next=cur-><span style="color: rgba(0, 0, 0, 1)">next;     cur</span>->next->prev=<span style="color: rgba(0, 0, 0, 1)">tmp;     tmp</span>->prev=<span style="color: rgba(0, 0, 0, 1)">cur;     cur</span>->next=<span style="color: rgba(0, 0, 0, 1)">tmp;     l</span>->n++<span style="color: rgba(0, 0, 0, 1)">; }</span></pre> </div> <p><strong>C 删除操作</strong><br />　　删除操作的思路是要先找到删除位置的前驱结点，当删除的是第一个结点时由于位置查找的函数同样也可以返回第0个位置的结点指针(返回头结点)，同样使得删除操作都可以使用一致的代码。实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在双向循环链表中删除pos位置节点并输出当前值，pos从1到l->n</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> *dlist_delete(dlist_t *l,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> pos){</span><span style="color: rgba(0, 0, 255, 1)">if</span>(pos<<span style="color: rgba(128, 0, 128, 1)">1</span>|| pos>l-><span style="color: rgba(0, 0, 0, 1)">n){         printf(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Invalid position</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL;     }     dlist_node_t</span>*cur=dlist_find_pos(l,pos-<span style="color: rgba(128, 0, 128, 1)">1</span>);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">找到删除位置的前驱节点</span>     dlist_node_t *tmp=cur->next;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">被删除位置的节点</span><span style="color: rgba(0, 0, 0, 1)">     cur</span>->next=tmp-><span style="color: rgba(0, 0, 0, 1)">next;     tmp</span>->next->prev=<span style="color: rgba(0, 0, 0, 1)">cur;</span><span style="color: rgba(0, 0, 255, 1)">void</span> *res_item=tmp-><span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">free</span><span style="color: rgba(0, 0, 0, 1)">(tmp);     l</span>->n--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> res_item; }</span></pre> </div> <h2 id="23-跳跃表skiplist"><span style="font-size: 16px">2.3 跳跃表skiplist</span></h2> <p>　　在字典的实现中，通常使用平衡二叉树会得到较好的性能保证，例如AVL tree、Red-Black tree、Self-adjusting trees。对于除伸展树外(单个操作是O(n)的时间复杂度)的一些平衡树,它们的插入、删除等操作一般有对数级别的时间复杂度。但它们的缺点是需要维护二叉树平衡的信息，在实现上有一定的难度，显然数据结构的随机化比维护平衡信息更容易实现。</p> <p>　　定义跳跃表节点和跳跃表的数据结构如下:</p> <div class="cnblogs_code"> <pre>typedef<span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> skiplist_node {</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item;</span><span style="color: rgba(0, 0, 255, 1)">struct</span> skiplist_node *forward[<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">]; } skiplist_node_t;  typedef</span><span style="color: rgba(0, 0, 255, 1)">struct</span><span style="color: rgba(0, 0, 0, 1)"> {     skiplist_node_t</span>*<span style="color: rgba(0, 0, 0, 1)">head;     skiplist_node_t</span>**<span style="color: rgba(0, 0, 0, 1)">update;</span><span style="color: rgba(0, 0, 255, 1)">double</span><span style="color: rgba(0, 0, 0, 1)"> prob;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> max_level;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> level;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> n; } skiplist_t;</span></pre> </div> <p>　　为了灵活性，在跳表结点的结构定义中，把结点指向某个含有键值对的表项而非整数键</p> <ul> <li><code>item</code>: 表示结点的数据项</li> <li><code>forward</code>: 长度为1的柔性数组，切记节点的大小包括一个数组元素(与长度为0的数组大小不想同)</li> <li>柔性数组: 表明每个节点对应的<code>forward</code>数组是变长的</li> </ul> <p>　　在跳表的数据结构定义中:</p> <ul> <li><code>head</code>: 为了简化插入和删除操作，定义一个虚拟头结点，它含有最大层次+1个forward前向指针</li> <li><code>update数组</code>: 用于在插入、删除、查找操作中更新每个层级被查找节点的前驱指针。它在跳表初始化时就被创建，防止了每次在进行插入等操作时需要分配和释放该数组的内存</li> <li><code>prob</code>: 某节点被创建时出现在某层次的概率。 它的概率分布类似于丢硬币实验，连续i次出现同种情形(如正面)对应i的次数的分布。很显然它满足参数为p的几何分布，期望值为1/p</li> <li><code>level</code>: 跳表当前的最大层次</li> <li><code>comp</code>: 比较跳表中表项大小的函数</li> <li><code>n</code>: 当前存储在跳表中的元素个数</li> </ul> <p>　　建议我们理想中开始查找的层次为<code>L(N)=log(N)/log(1/p)</code>。例如p=0.5时，处理至多含有2^16个数据的跳表最大的层次是16，即定义中的max_level。</p> <h3 id="231-跳表的插入删除查找操作">2.3.1 跳表的插入、删除、查找操作</h3> <p><strong>A 跳表的初始化和节点层次的随机化生成</strong><br />　　在初始化跳表时需要明确几点:</p> <ul> <li>跳表的最大层次的计算公式:<code>int max_level= -log(N)/log(prob);</code>。例如<code>prob=0.5</code>,8个节点的跳表它应该有0,1,2,3层</li> <li>链表头结点有<code>max_level+1</code>个前向指针，从0开始初始化(头结点本身含有1个level 0级别的前向指针，再加上借助柔性数组扩展的<code>max_level</code>个前向指针)</li> <li>对于某层次i的前向指针为NULL表示该层级上的虚拟链表为空</li> <li>为防止每次插入或删除操作时要重复分配update数组预先初始化</li> </ul> <p>　　它实现如下:</p> <div class="cnblogs_code"> <pre>skiplist_t *skiplist_alloc(<span style="color: rgba(0, 0, 255, 1)">int</span> capacity,<span style="color: rgba(0, 0, 255, 1)">double</span> prob,<span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">)){     skiplist_t</span>*l=<span style="color: rgba(0, 0, 255, 1)">malloc</span>(<span style="color: rgba(0, 0, 255, 1)">sizeof</span><span style="color: rgba(0, 0, 0, 1)">(skiplist_t));     l</span>->prob=<span style="color: rgba(0, 0, 0, 1)">prob;     l</span>->comp=<span style="color: rgba(0, 0, 0, 1)">comp;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">注gcc的数学函数定义在libm.so文件例，需链接上数学库，编译时添加 -lm选项</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">int</span> max_level= -log(capacity)/log(prob);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这个指的是最高的层级max_level,例如8个节点的话有0,1,2,3层</span>     l->max_level=max_level;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">例如max_level为16</span>     l->level=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;     l</span>->head=<span style="color: rgba(0, 0, 0, 1)">new_skiplist_node(max_level,NULL);</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">更新头结点的forward数组为NULL</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">for</span>(<span style="color: rgba(0, 0, 255, 1)">int</span> i=<span style="color: rgba(128, 0, 128, 1)">0</span>;i<=max_level;i++<span style="color: rgba(0, 0, 0, 1)">){         l</span>->head->forward[i]=<span style="color: rgba(0, 0, 0, 1)">NULL;     }</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">为防止每次插入或删除操作时要重复分配update数组</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     l</span>->update=<span style="color: rgba(0, 0, 255, 1)">malloc</span>((max_level+<span style="color: rgba(128, 0, 128, 1)">1</span>)*<span style="color: rgba(0, 0, 255, 1)">sizeof</span>(skiplist_node_t *<span style="color: rgba(0, 0, 0, 1)">));     l</span>->n=<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> l; }</span></pre> </div> <p>　　节点层次的随机化生成，要点有两个:</p> <ul> <li>链表的层次为i,表示若随机生成的level大于i则i层次以上的前向指针均指向为NULL</li> <li>生成的level值范围是0-max_level,但这种随机数的生成效果并不是最佳的，它也可能出现某些层次以上的元素完全相同</li> </ul> <p>　　它的实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">int</span> rand_level(<span style="color: rgba(0, 0, 255, 1)">double</span> prob,<span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> max_level){</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> level;</span><span style="color: rgba(0, 0, 255, 1)">int</span> rand_mark=prob*<span style="color: rgba(0, 0, 0, 1)">RAND_MAX;</span><span style="color: rgba(0, 0, 255, 1)">for</span>(level=<span style="color: rgba(128, 0, 128, 1)">0</span>; rand()<rand_mark && level<max_level;level++<span style="color: rgba(0, 0, 0, 1)">) ;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> level; }</span></pre> </div> <p><strong>B 跳表的插入和删除操作</strong><br />　　插入和删除操作的核心在于简单的搜索和拆分(要么插入要么删除)。通过查找键在每个层次所属的位置，记录在一个update数组中。<code>update[i]</code>表示的是插入和删除位置的最右左边位置(个人称之为插入或删除位置的前驱指针)。如下图:</p> <p><img fetchpriority="high" decoding="async" src="http://img.555519.xyz/uploads3/20220510/718d719e8caa52c1b6c896b1bb88077c.jpg" alt="数据结构与算法知识点总结数组与链表" width="851" height="355" style="display: block; margin-left: auto; margin-right: auto"/></p> <p>　　插入操作的要点如下:</p> <ul> <li>找到待插入的位置(在当前元素的前向指针的键与元素的键相等或者大于的适合退出)，再更新每个层次的update数组</li> <li>随机生成新节点的level</li> <li>调整指向，插入新节点</li> </ul> <p>　　删除操作的要点如下:</p> <ul> <li>找到要调整位置的前驱指针</li> <li>自底层向高层进行节点的删除并释放该节点内存</li> <li>更新跳表的level（由于某些节点的删除可能会使部分高层次的前向指针为NULL）</li> </ul> <p>　　查找操作就比较简单，它是插入或删除操作的第一个步骤。三个操作的实现如下:</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">void</span> *skiplist_insert(skiplist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item){     skiplist_node_t</span>*cur=l-><span style="color: rgba(0, 0, 0, 1)">head;     skiplist_node_t</span>**update=l-><span style="color: rgba(0, 0, 0, 1)">update;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">);     comp</span>=l-><span style="color: rgba(0, 0, 0, 1)">comp;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">查找键所属的位置</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">for</span>(i=l->level;i>=<span style="color: rgba(128, 0, 128, 1)">0</span>;i--<span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">while</span>(cur->forward[i]!=NULL &&comp(cur->forward[i]->item,item)<<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)             cur</span>=cur->forward[i];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">在当前层次遍历直至前向指针为NULL或者对应的前向指针的元素大于或等于item</span>         update[i]=cur;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">更新插入位置的前驱指针</span><span style="color: rgba(0, 0, 0, 1)">    }     cur</span>=cur->forward[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">if</span>(cur!=NULL&&comp(cur->item,item)==<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 0, 255, 1)">return</span> cur->item;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">键值已存在，直接返回原来的节点</span><span style="color: rgba(0, 0, 255, 1)">int</span> level=rand_level(l->prob,l->max_level);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大的level控制在max_level</span><span style="color: rgba(0, 0, 255, 1)">if</span>(level> l->level){<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">如果新生成的层数比跳表层数大，更新下标大于i的update数组指向为头结点</span><span style="color: rgba(0, 0, 255, 1)">for</span>(i=l->level+<span style="color: rgba(128, 0, 128, 1)">1</span>;i<=level;i++){<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">持续到当前生成的level上</span>             update[i]=l-><span style="color: rgba(0, 0, 0, 1)">head;         }         l</span>->level=level;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">更新自己的层级数</span><span style="color: rgba(0, 0, 0, 1)">    }     skiplist_node_t</span>*tmp=<span style="color: rgba(0, 0, 0, 1)">new_skiplist_node(level,item);</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">*      * 调整前向指针的指向，插入新结点      * 问题就出现在这里，注意如果生成的level级别较低，只需要在从0..level的级别进行插入，切记不能使用l->level      * l->level和level是有不同的，除非level大于当前跳表的level时</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">for</span>(i=<span style="color: rgba(128, 0, 128, 1)">0</span>;i<=level;i++<span style="color: rgba(0, 0, 0, 1)">){          tmp</span>->forward[i]=update[i]-><span style="color: rgba(0, 0, 0, 1)">forward[i];         update[i]</span>->forward[i]=<span style="color: rgba(0, 0, 0, 1)">tmp;     }     l</span>->n++<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL; }</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">在跳表中进行查找，找到返回当前元素的item否则返回NULL</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">void</span> *skiplist_find(skiplist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">key_item){</span><span style="color: rgba(0, 128, 0, 1)">/*</span><span style="color: rgba(0, 128, 0, 1)">查找是否含有当前的元素</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 0, 1)">     skiplist_node_t</span>*cur=l-><span style="color: rgba(0, 0, 0, 1)">head;     skiplist_node_t</span>**update=l-><span style="color: rgba(0, 0, 0, 1)">update;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">);     comp</span>=l-><span style="color: rgba(0, 0, 0, 1)">comp;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> i,res;</span><span style="color: rgba(0, 0, 255, 1)">for</span>(i=l->level;i>=<span style="color: rgba(128, 0, 128, 1)">0</span>;i--<span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">while</span>(cur->forward[i]!=NULL &&((res=comp(cur->forward[i]->item,key_item))<<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">))             cur</span>=cur->forward[i];<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">在当前层次遍历直至前向指针为NULL或者对应的前向指针的元素大于或等于item</span>         update[i]=cur;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">更新插入位置的前驱指针</span><span style="color: rgba(0, 0, 0, 1)">    }     cur</span>=cur->forward[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">if</span>(cur!=NULL&&comp(cur->item,key_item)==<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">return</span> cur-><span style="color: rgba(0, 0, 0, 1)">item;     }</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> NULL; }</span><span style="color: rgba(0, 0, 255, 1)">void</span> *skiplist_delete(skiplist_t *l,<span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">item){     skiplist_node_t</span>*cur=l-><span style="color: rgba(0, 0, 0, 1)">head;     skiplist_node_t</span>**update=l-><span style="color: rgba(0, 0, 0, 1)">update;</span><span style="color: rgba(0, 0, 255, 1)">int</span> (*comp)(<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *,<span style="color: rgba(0, 0, 255, 1)">const</span><span style="color: rgba(0, 0, 255, 1)">void</span> *<span style="color: rgba(0, 0, 0, 1)">);     comp</span>=l-><span style="color: rgba(0, 0, 0, 1)">comp;</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> i;</span><span style="color: rgba(0, 0, 255, 1)">int</span> level=l-><span style="color: rgba(0, 0, 0, 1)">level;</span><span style="color: rgba(0, 0, 255, 1)">for</span>(i=level;i>=<span style="color: rgba(128, 0, 128, 1)">0</span>;i--<span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">while</span>(cur->forward[i]&&comp(cur->forward[i]->item,item)<<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">)             cur</span>=cur-><span style="color: rgba(0, 0, 0, 1)">forward[i];         update[i]</span>=<span style="color: rgba(0, 0, 0, 1)">cur;     }     cur</span>=cur->forward[<span style="color: rgba(128, 0, 128, 1)">0</span><span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 0, 255, 1)">if</span>(cur==NULL||comp(cur->item,item)!=<span style="color: rgba(128, 0, 128, 1)">0</span>)<span style="color: rgba(0, 0, 255, 1)">return</span> NULL;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">键值不存在</span><span style="color: rgba(0, 0, 255, 1)">for</span>(i=<span style="color: rgba(128, 0, 128, 1)">0</span>;i<=level;i++<span style="color: rgba(0, 0, 0, 1)">){</span><span style="color: rgba(0, 0, 255, 1)">if</span>(update[i]->forward[i]!=cur)<span style="color: rgba(0, 0, 255, 1)">break</span>;<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">若低层次的前向指针不包括cur，则高层次就不可能存在(高层次的链表是低层次的子链表)</span>         update[i]->forward[i]=cur-><span style="color: rgba(0, 0, 0, 1)">forward[i];     }</span><span style="color: rgba(0, 0, 255, 1)">void</span> *ret_item=cur-><span style="color: rgba(0, 0, 0, 1)">item;     l</span>->n--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">free</span><span style="color: rgba(0, 0, 0, 1)">(cur);</span><span style="color: rgba(0, 0, 255, 1)">while</span>(l->level><span style="color: rgba(128, 0, 128, 1)">0</span> &&l->head->forward[l->level]==<span style="color: rgba(0, 0, 0, 1)">NULL)         l</span>->level--<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">return</span><span style="color: rgba(0, 0, 0, 1)"> ret_item; }</span></pre> </div> <h3 id="232-总结">2.3.2 总结</h3> <p>　　尽管跳表在wort-case时会生成一个糟糕的不平衡结构，没法和平衡树一样保证较好的最坏或均摊的性能，但发生这个情形的概率很小。并且它在实际工作中效果很好，对于很多应用来说，随机化的平衡方法-跳跃链表相比平衡树树而言，它是一种更自然的表示，并且算法更为简单，实现起来更为容易，比平衡树具有更好的常数优化性能。</p> <p>　　下面是一些使用跳表的应用和框架列表，可见相比平衡树，跳跃表还是有很多实际应用的</p> <ul> <li>Lucene: 使用跳表在对数时间内search delta-encoded posting lists</li> <li>Redis: 基于跳表实现它的有序集合</li> <li>nessDB: a very fast key-value embedded Database Storage Engine (Using log-structured-merge (LSM) trees), uses skip lists for its memtable</li> <li>skipdb: 一个开源的基于跳跃表实现的可移植的支持ACID事务操作的Berkeley DB分割的数据库</li> <li>ConcurrentSkipListSet&nbsp;and ConcurrentSkipListMap in the Java 1.6 API.</li> <li>leveldb: a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values</li> <li>Skip lists are used for efficient statistical computations&nbsp;of running medians (also known as moving medians)。</li> </ul> <p>　　另外跳跃表也可应用在分布式应用中，用来实现高扩展性的并发优先级队列和并发词典(使用少量的锁或者基于无锁)，所以学习基于随机化技术的跳跃表是很有必要的。</p> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2906.htm">MySQL的聚合函数是否忽略NULL</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2908.htm">Spring按业务模块输出日志到不同的文件_在线工具</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3101.htm" title="Docker基础ONBUILD指令介绍">Docker基础ONBUILD指令介绍</a></li>
                        <li class="py-2"><a href="/html/category/article-3113.htm" title="java计算器页面的实现">java计算器页面的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-3119.htm" title="Cpp的异常处理Exception Handling-笔记">Cpp的异常处理Exception Handling-笔记</a></li>
                        <li class="py-2"><a href="/html/category/article-4116.htm" title="我们如何借助组函数COUNT（*）和GROUP BY子句知道列中值的重复？">我们如何借助组函数COUNT（*）和GROUP BY子句知道列中值的重复？</a></li>
                        <li class="py-2"><a href="/html/category/article-4462.htm" title="24小时动物医院龙泉（龙泉宠物医院）">24小时动物医院龙泉（龙泉宠物医院）</a></li>
                        <li class="py-2"><a href="/html/category/article-4534.htm" title="鱼子怎么做最好吃?(鱼子怎么做简单又好吃视频)">鱼子怎么做最好吃?(鱼子怎么做简单又好吃视频)</a></li>
                        <li class="py-2"><a href="/html/category/article-4115.htm" title="Mac电脑配置maven，idea配置maven">Mac电脑配置maven，idea配置maven</a></li>
                        <li class="py-2"><a href="/html/category/article-4499.htm" title="微单相机哪个品牌的比较好">微单相机哪个品牌的比较好</a></li>
                        <li class="py-2"><a href="/html/category/article-3108.htm" title="【远程文件浏览器】Unity+Lua开发调试利器">【远程文件浏览器】Unity+Lua开发调试利器</a></li>
                        <li class="py-2"><a href="/html/category/article-3775.htm" title="python 对论文插图制作局部放大图并在原图中相同位置加边框">python 对论文插图制作局部放大图并在原图中相同位置加边框</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">26</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>