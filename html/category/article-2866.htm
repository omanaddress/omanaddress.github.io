<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2866.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>Spring Boot 整合 Apache Dubbo - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">Spring Boot 整合 Apache Dubbo</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>                    org.apache.dubbo dubbo-spring-boot-starter 2.7.5 Spring Boot 版本 org.springframework.boot spring-boot-starter-parent 2.1.1.RELEASE 1.2 模块关系 根工程 order：管理工程信息； 子工程 order-api：定义RPC服务的接口、参数以及响应结果的结果集； 子工程 order-provider：RPC服务的提供端； 子工程 order-consumer：RPC服务的消费端，实际开发过程中实际情况是其它服务的调用该订单RPC服务 二、根工程 2.1 创建项目 order 我这里为了和之前老版本的alibaba的dubbo项目区分，文件名取为apache-dubbo-demo，maven 项目名称为order。 </p> <p>该项目主要作用是定义工程信息、管理整个项目依赖版本等等，所以src目录不需要。</p> <p>2.2 pom.xml<br /> 根工程中使用了和进行依赖管理。</p> <p>：声明全局依赖，当子项目指定引用才会继承依赖；<br /> ：声明全局依赖，子项目直接自动继承依赖。</p> <p> &lt;?xml version="1.0" encoding="UTF-8"?&gt; </p> <p> 4.0.0</p> <pre><code>&lt;!-- 父级引用 --&gt; &lt;parent&gt;     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;     &lt;version&gt;2.1.1.RELEASE&lt;/version&gt;     &lt;relativePath/&gt; &lt;/parent&gt;  &lt;!-- 基本信息 --&gt; &lt;groupId&gt;cn.van.order&lt;/groupId&gt; &lt;artifactId&gt;order&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;${project.artifactId}&lt;/name&gt; &lt;description&gt;Apache Dubbo 根项目&lt;/description&gt;  &lt;!--配置--&gt; &lt;properties&gt;     &lt;java.version&gt;1.8&lt;/java.version&gt;     &lt;dubbo.version&gt;2.7.5&lt;/dubbo.version&gt;     &lt;zookeeper.version&gt;3.4.14&lt;/zookeeper.version&gt; &lt;/properties&gt;  &lt;!-- 子项目 --&gt; &lt;modules&gt;     &lt;module&gt;order-api&lt;/module&gt;     &lt;module&gt;order-provider&lt;/module&gt;     &lt;module&gt;order-consumer&lt;/module&gt; &lt;/modules&gt;  &lt;!--声明全局依赖（子项目需要显示的引用才会继承依赖）--&gt; &lt;dependencyManagement&gt;     &lt;dependencies&gt;         &lt;!-- dubbo-start依赖 --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;             &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;             &lt;version&gt;${dubbo.version}&lt;/version&gt;         &lt;/dependency&gt;         &lt;!--zookeeper 注册中心客户端引入 使用的是curator客户端 --&gt;         &lt;dependency&gt;             &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;             &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;             &lt;version&gt;${dubbo.version}&lt;/version&gt;             &lt;type&gt;pom&lt;/type&gt;             &lt;exclusions&gt;                 &lt;exclusion&gt;                     &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;                     &lt;groupId&gt;org.slf4j&lt;/groupId&gt;                 &lt;/exclusion&gt;             &lt;/exclusions&gt;         &lt;/dependency&gt;     &lt;/dependencies&gt; &lt;/dependencyManagement&gt;  &lt;!--声明全局依赖（子项目不需要显示的引用，自动继承依赖）--&gt; &lt;dependencies&gt;     &lt;!-- spring boot 依赖 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;         &lt;scope&gt;test&lt;/scope&gt;         &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;                 &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;             &lt;/exclusion&gt;         &lt;/exclusions&gt;     &lt;/dependency&gt; &lt;/dependencies&gt;  &lt;!-- 打包插件 --&gt; &lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> <p> 三、order-api 3.1 项目依赖 无需更多依赖，所以很简单。 &lt;?xml version="1.0" encoding="UTF-8"?&gt; </p> <p> 4.0.0</p> <pre><code>&lt;parent&gt;     &lt;groupId&gt;cn.van.order&lt;/groupId&gt;     &lt;artifactId&gt;order&lt;/artifactId&gt;     &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt;  &lt;groupId&gt;cn.van.order&lt;/groupId&gt; &lt;artifactId&gt;order-api&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;${project.artifactId}&lt;/name&gt; &lt;description&gt;dubbo公共项目&lt;/description&gt;   &lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> <p> 3.2 封装 RPC 结果集 先封装一个返回码枚举类ResultCodeEnum.java public enum ResultCodeEnum { /*** 通用部分 100 - 599***/ // 成功请求 SUCCESS(200, "successful"), </p> <pre><code>/*** 这里可以根据不同模块用不同的区级分开错误码，例如:  ***/  // 1000～1999 区间表示用户模块错误 // 2000～2999 区间表示订单模块错误 // 3000～3999 区间表示商品模块错误 // 。。。  ORDER_NOT_FOUND(2000, "order not found"), ; /**  * 响应状态码  */ private Integer code; /**  * 响应信息  */ private String message;  ResultCodeEnum(Integer code, String msg) {     this.code = code;     this.message = msg; }  public Integer getCode() {     return code; }  public String getMessage() {     return message; }  public void setMessage(String message) {     this.message = message; } </code></pre> <p>}<br /> 先封装一个RPC 响应结果集RpcResult.java<br /> public class RpcResult implements Serializable {<!-- --></p> <pre><code>/**  * 是否响应成功  */ private Boolean success; /**  * 响应状态码  */ private Integer code; /**  * 响应数据  */ private T data; /**  * 错误信息  */ private String message;  // 构造器开始 /**  * 无参构造器(构造器私有，外部不可以直接创建)  */ private RpcResult() {     this.code = 200;     this.success = true; } /**  * 有参构造器  * @param obj  */ private RpcResult(T obj) {     this.code = 200;     this.data = obj;     this.success = true; }  /**  * 有参构造器  * @param resultCode  */ private RpcResult(ResultCodeEnum resultCode) {     this.success = false;     this.code = resultCode.getCode();     this.message = resultCode.getMessage(); } // 构造器结束  /**  * 通用返回成功（没有返回结果）  * @param &lt;T&gt;  * @return  */ public static&lt;T&gt; RpcResult&lt;T&gt; success(){     return new RpcResult(); }  /**  * 返回成功（有返回结果）  * @param data  * @param &lt;T&gt;  * @return  */ public static&lt;T&gt; RpcResult&lt;T&gt; success(T data){     return new RpcResult&lt;T&gt;(data); }  /**  * 通用返回失败  * @param resultCode  * @param &lt;T&gt;  * @return  */ public static&lt;T&gt; RpcResult&lt;T&gt; failure(ResultCodeEnum resultCode){     return  new RpcResult&lt;T&gt;(resultCode); }  public Boolean getSuccess() {     return success; }  public void setSuccess(Boolean success) {     this.success = success; }  public Integer getCode() {     return code; }  public void setCode(Integer code) {     this.code = code; }  public T getData() {     return data; }  public void setData(T data) {     this.data = data; }  public String getMessage() {     return message; }  public void setMessage(String message) {     this.message = message; }  @Override public String toString() {     return "RpcResult{" +             "success=" + success +             ", code=" + code +             ", data=" + data +             ", message='" + message + '\'' +             '}'; } </code></pre> <p>}<br /> 3.3 编写一个 RPC 接口<br /> public interface OrderDubboService {<!-- --><br /> RpcResult getOrder();<br /> }<br /> 实体OrderDomain.java挺简单的，详见 Github 仓库。</p> <p>四、order-provider<br /> 此子项目是一个服务类项目，也就是将接口服务注册到zookeeper注册中心供消费端调取使用。</p> <p>4.1 项目依赖</p> <p> &lt;?xml version="1.0" encoding="UTF-8"?&gt; </p> <p> 4.0.0</p> <p> cn.van.order<br /> order<br /> 1.0.0-SNAPSHOT</p> <pre><code>&lt;groupId&gt;cn.van.order&lt;/groupId&gt; &lt;artifactId&gt;order-provider&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;${project.artifactId}&lt;/name&gt; &lt;description&gt;Dubbo 服务提供者&lt;/description&gt;  &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;cn.van.order&lt;/groupId&gt;         &lt;artifactId&gt;order-api&lt;/artifactId&gt;         &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;     &lt;/dependency&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;         &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;     &lt;/dependency&gt;     &lt;!-- zookeeper依赖 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;         &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;         &lt;version&gt;${dubbo.version}&lt;/version&gt;         &lt;type&gt;pom&lt;/type&gt;         &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;                 &lt;groupId&gt;org.slf4j&lt;/groupId&gt;             &lt;/exclusion&gt;         &lt;/exclusions&gt;     &lt;/dependency&gt; &lt;/dependencies&gt;  &lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> <p> 4.2 服务实现接口 @Service public class OrderDubboServiceImpl implements OrderDubboService { </p> <pre><code>@Override public RpcResult&lt;OrderDomain&gt; getOrder() {     return RpcResult.success(new OrderDomain(1, 10086, LocalDateTime.now())); } </code></pre> <p>}<br /> 注意：<br /> @Service 是 dubbo 包下面的注解不是 Spring 里面的注解。</p> <p>4.3 项目配置<br /> dubbo 的配置直接用 dubbo，不再以 Spring 开头;<br /> base-packages：指定接口实现所在路径。<br /> server:</p> <h1> <a id="_390" rel="nofollow"></a>服务端口</h1> <p>port: 7777<br /> spring:<br /> application:<br /> name: order-provider</p> <h1> <a id="dubbo_dubbo__Spring__395" rel="nofollow"></a>dubbo 相关配置(dubbo 的配置不再以 Spring 开头)</h1> <p>dubbo:<br /> application:<br /> # 应用名称<br /> name: order-provider<br /> scan:<br /> # 接口实现者（服务实现）包<br /> base-packages: cn.van.order.service.impl</p> <h1> <a id="_403" rel="nofollow"></a>注册中心信息</h1> <p>registry:<br /> address: zookeeper://127.0.0.1:2181<br /> protocol:<br /> # 协议名称<br /> name: dubbo<br /> # 协议端口<br /> port: 20880<br /> 五、order-consumer<br /> 此子项目就是一个消费项目，比如商品模块、财务模块等等。</p> <p>5.1 项目依赖</p> <p> &lt;?xml version="1.0" encoding="UTF-8"?&gt; </p> <p> 4.0.0</p> <pre><code>&lt;parent&gt;     &lt;groupId&gt;cn.van.order&lt;/groupId&gt;     &lt;artifactId&gt;order&lt;/artifactId&gt;     &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt;  &lt;groupId&gt;cn.van.order&lt;/groupId&gt; &lt;artifactId&gt;order-consumer&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;name&gt;${project.artifactId}&lt;/name&gt; &lt;description&gt;Dubbo 消费者&lt;/description&gt;   &lt;dependencies&gt;     &lt;dependency&gt;         &lt;groupId&gt;cn.van.order&lt;/groupId&gt;         &lt;artifactId&gt;order-api&lt;/artifactId&gt;         &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;     &lt;/dependency&gt;      &lt;!-- web项目依赖 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;!-- dubbo依赖 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;         &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;     &lt;/dependency&gt;      &lt;!-- dubbo的zookeeper依赖 --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;         &lt;artifactId&gt;dubbo-dependencies-zookeeper&lt;/artifactId&gt;         &lt;version&gt;${dubbo.version}&lt;/version&gt;         &lt;type&gt;pom&lt;/type&gt;         &lt;exclusions&gt;             &lt;exclusion&gt;                 &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;                 &lt;groupId&gt;org.slf4j&lt;/groupId&gt;             &lt;/exclusion&gt;         &lt;/exclusions&gt;     &lt;/dependency&gt; &lt;/dependencies&gt;  &lt;build&gt;     &lt;plugins&gt;         &lt;plugin&gt;             &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;             &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;         &lt;/plugin&gt;     &lt;/plugins&gt; &lt;/build&gt; </code></pre> <p> 5.2 测试接口 模拟一个接口获取订单详情。 </p> <p>@RestController<br /> @RequestMapping("/order")<br /> public class OrderConsumerController {<!-- --><br /> @Reference<br /> OrderDubboService orderDubboService;</p> <pre><code>@GetMapping("getOrder") public RpcResult getOrder() {     return orderDubboService.getOrder(); } </code></pre> <p>}<br /> 注意：@Reference引入的是 Dubbo 接口，所以是 Dubbo 的注解。</p> <p>5.3 配置文件<br /> server:<br /> port: 7000<br /> spring:<br /> application:<br /> name: order-consumer</p> <h1> <a id="dubbo__499" rel="nofollow"></a>dubbo 相关配置</h1> <p>dubbo:<br /> application:<br /> name: order-consumer<br /> registry:<br /> address: zookeeper://127.0.0.1:2181<br /> 六、测试<br /> 一切就绪，如果在order-consumer 的测试接口能成功请求到数据，则证明 Dubbo 服务搭建成功。</p> <p>6.1 启动 zookeeper<br /> 我们选用zookeeper作为注册中心，因此启动项目之前需要先启动它。</p> <p>6.2 dubbo-admin<br /> dubbo-admin 便于观察 order-provider 是否成功将接口注册，具体安装步骤详见apache/dubbo-admin</p> <p>默认端口：8080。</p> <p>6.3 启动 dubbo-provider<br /> 成功启动后可以在dubbo-admin：已经成功将接口 OrderService 注册到 zookeeper 上如下：</p> <p>风尘博客</p> <p>成功将借口注册到注册中心，说明dubbo-provider 注册成功。</p> <p>6.4 启动 order-cosumer<br /> 启动消费者项目，在浏览器请求消费接口：http://localhost:7000/order/getOrder，成功返回数据如下：</p> <p>{<!-- --><br /> “success”:true,<br /> “code”:200,<br /> “data”:{<!-- --><br /> “id”:1,<br /> “orderNum”:10086,<br /> “gmtCreate”:“2020-05-06T11:59:45.535”<br /> },<br /> “message”:null<br /> }<br /> 亚马逊测评 www.yisuping.com</p> </p></div> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2865.htm">Vant indexBar 索引栏用法和搜索条件的功能</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2867.htm">springboot项目中访问druid内置监控页面</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3088.htm" title="JavaScript秒表开始、暂停、继续、重置功能的实现及连击的优化">JavaScript秒表开始、暂停、继续、重置功能的实现及连击的优化</a></li>
                        <li class="py-2"><a href="/html/category/article-3120.htm" title="PHP浮点数据类型详解">PHP浮点数据类型详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3089.htm" title="SpringMVC中RequestMapping注解【作用、出现的位置、属性】">SpringMVC中RequestMapping注解【作用、出现的位置、属性】</a></li>
                        <li class="py-2"><a href="/html/category/article-3092.htm" title="linux安装离线docker包教程,Centos7离线安装Docker">linux安装离线docker包教程,Centos7离线安装Docker</a></li>
                        <li class="py-2"><a href="/html/category/article-3066.htm" title="源码级别的广播与监听实现">源码级别的广播与监听实现</a></li>
                        <li class="py-2"><a href="/html/category/article-3097.htm" title="vue 动态样式绑定">vue 动态样式绑定</a></li>
                        <li class="py-2"><a href="/html/category/article-3075.htm" title="springboot Jar包 秒部署到Linux服务器运行">springboot Jar包 秒部署到Linux服务器运行</a></li>
                        <li class="py-2"><a href="/html/category/article-3093.htm" title="Android 自定义方形验证码输入框，仿滴滴、小篮单车">Android 自定义方形验证码输入框，仿滴滴、小篮单车</a></li>
                        <li class="py-2"><a href="/html/category/article-3090.htm" title="Uniapp实现自定义组件">Uniapp实现自定义组件</a></li>
                        <li class="py-2"><a href="/html/category/article-3109.htm" title="C++内存泄漏的定位方法总结">C++内存泄漏的定位方法总结</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">54</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>