<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2854.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>C语言指针高级篇 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">C语言指针高级篇</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <strong>相信很多人都听过指针是c语言的灵魂！</strong><br /> </h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>对于指针的学习，往往也是最难的，也是最难搞懂的，那么今天我们一起来学习分析c语言的指针，体会c语言的魅力！</strong></p> <p>指针和指针应用大概分为一下几类：<br /> 1、字符指针<br /> 2、数组指针<br /> 3、指针数组<br /> 4、数组传参和指针传参<br /> 5、函数指针<br /> 6、函数指针数组<br /> 7、指向函数指针数组的指针</p> <p>这里我就不列举常见数据类型的指针（如：整形类型的指针int * 双精度类型的指针double *等等), 讲字符指针我会连带说下他们。</p> <h2> 一、字符指针</h2> <p><strong>字符指针它的功能有：</strong><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、指向字符串常量（char *str = “abdefg”）<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、指向字符数组（有一个字符数组char str1[20] = {0}; char str = str1;）<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、当字符数组作为实参数传递时，形参实际上是字符指针。</p> <p>（1）在这里，我要提一下第1个功能， 当指向字符串常量时，是不能修改字符串里面的值的，因为常量无法修改，你可以访问它，但不可以修改。<br /> （2）字符串不同于字符，他后面是有结束符’\0’的，千万不能忽略！</p> <p><strong>接下来请大家做一道习题考察下自己的能力吧！</strong></p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdio.h></span></span> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><stdlib.h></span></span> <span class="token macro property">#<span class="token directive keyword">include</span><span class="token string"><string.h></span></span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wozhenshuai"</span><span class="token punctuation">;</span> 	<span class="token keyword">char</span> <span class="token operator">*</span>str2 <span class="token operator">=</span> <span class="token string">"wozhenshuai"</span><span class="token punctuation">;</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d, %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <blockquote> <p>正确答案是：<br /> 20，11<br /> 4，11</p> </blockquote> <p><strong>分析上述案例：</strong><br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数组名，他一共有3个含义。<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、指向数组首元素的地址，<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、sizeof求数组大小，它默认为指向整个数组，上述一共20个元素，每个元素都是char类型，char占用一个字节，所以一共为20*1 = 20字节。<br /> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、当对数组名取地址符&默认是对整个数组取地址，因此&str1+1 相当横跨整个数组。</p> <h2> 二、数组指针&指针数组</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>数组指针和指针数组是比较容易搞混的，区分它们的关键在于重心是谁， 何解？ 举几个例子</strong></p> <blockquote> <p>char (*pa)[20];</p> </blockquote> <p><strong>提前声明： [] 优先级大于</strong>*</p> <p>上面这个例子， 由于(*pa) 加了括号， *的优先级会比[]高， 所以pa是数组指针，<br /> 去掉(*pa), 剩下char [20], 因此，这个数组指针指向的是char [20]的数组，长度为20，元素类型为char。</p> <blockquote> <p>char *pa[20];</p> </blockquote> <p>的优先级小于[], 因此pa是指针数组， 去掉pa[20], 剩下char指针, 所以这个指针数组里面的成员是char指针类型。</p> <p><em>同样可以看出看出类型后，看内部成员类型可以采用去除法， 这个方法很有效。</em></p> <p><strong>接下来我们来做几道例题，巩固下自己，分析一下是什么类型？指向什么？</strong></p> <blockquote> <p>（1）int *p1[6];<br /> （2）int (*p3)[6];</p> </blockquote> <p><strong>分析总结：</strong><br /> （1）第一道题先观察优先级，很明显[]大于*，因此这是一个数组，去掉p1[6]，剩下int*，因此这是一个存放int*类型的数组，数组里面有6个元素，每个元素都是int *型的。<br /> （2）同样观察优先级，（*p1）大于[]，因此这是一个指针，去掉（*p3)，剩下int [6], 因此这是一个指向int [6]数组的指针，</p> <h2> 三、数组传参和指针传参</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>数组作为实参传递，接受的形参其实是指针，指针传参，则用对应的指针接受。</strong></p> <p><strong>下面我们做来做几道习题，通过习题来讲解传参问题</strong></p> <p><strong>测试1</strong></p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string"><stdio.h></span> </span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> sz<span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>     	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator"><</span>sz<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     	<span class="token punctuation">{<!-- --></span>         		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> arr<span class="token punctuation">;</span>         <span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>这里arr作为实参传入， 还需要传入数组长度。<br /> 为什么呢？这是因为传递的数组名（也就是数组首元素地址），他是用指针接收的，对于数组的长度并不知晓！如果有使用数组长度等条件（如题上遍历数组元素）需要将长度作为参数传递！</strong></p> <p>使用sizeof(数组名) / sizeof(数组首元素) = 数组长度。 这是一个非常方便、轻巧的方式， 希望大家写的时候用起来!</p> <p><strong>测试2</strong></p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string"><stdio.h></span> </span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ptr<span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>   	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"num = %d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>   	<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 	<span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>	 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p><strong>上面的代码对吗？ 请各位小伙伴运行下这段代码，看看会出现什么错误。</strong><br /><strong>很明显，实参和形参类型不匹配，二维数组的数据类型不是二级指针，而是数组指针，因此形参写成int</strong> (*a)[4]。</p> <h2> 四、函数指针</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>函数是有地址的，和指针一样。那么有地址，我们对它进行取地址会出现什么呢？ 结果是还是它本身，因此函数去地址还是它本身。<br /> 如果对函数取地址，我们用什么接收它呢？ 对它去取地址会是什么类型呢？</strong></p> <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>   	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hehe\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token comment">//下面pfun1和pfun2哪个有能力存放test函数的地址？ </span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pfun1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">pfun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre> <blockquote> <p>1、void (*pfun1)();<br /> 2、void *pfun2();</p> </blockquote> <p><strong>答案是void ( * pfun1)()来接收它的地址。</strong><br /><strong>和数组指针一样看法一样， 可以看出这是一个指针， 去掉( * pfun1)之后， 剩余void ()， 这是一个函数类型， 返回值为void类型， 函数参数为空。 （只有带()就是函数类型）。</strong></p> <p><strong>那么它有什么用呢？我们可以调用函数，传递函数指针，然后解引用函数指针然后调用函数，使用函数内部的功能。虽说可以直接调用，但是函数指针可以构建成函数指针数组，数组里面都是函数指针，我们调用就像使用数组一样方便。而且更加系统化！</strong></p> <h2> 五、函数指针数组指针&&函数指针数组</h2> <p><strong>下面就是一些扩展！</strong></p> <pre><code class="prism language-c"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>   	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>   	<span class="token comment">//函数指针pfun  </span> 	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pfun<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> test<span class="token punctuation">;</span>   	<span class="token comment">//函数指针的数组pfunArr </span>  	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pfunArr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    	pfunArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">;</span>    	<span class="token comment">//指向函数指针数组pfunArr的指针ppfunArr  </span>  	<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>ppfunArr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&</span>pfunArr<span class="token punctuation">;</span>    	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> </code></pre> <blockquote> <p>void (<em>pfunArr[5])(const char</em> str);</p> </blockquote> <p>void (*pfunArr[5])(const char *str);<br /> 首先先找到变量名pfunArr，观察发现它是一个<strong>数组</strong>，去掉pfunArr[5]，<br /> 剩下<strong>void ( * )(const char *str)</strong>, 观察发现()里面是 *，是<strong>指针数组</strong>， 去掉( * ), 剩下void (const char * str), 这是函数类型， 所以是<strong>函数指针数组</strong>。<br /> pfunArr是一个长度为5的数组。<br /> 数组里面的元素为函数指针，函数的参数为(const char *str)，返回值为void。</p> <blockquote> <p>void (*(<em>ppfunArr)[10])(const char</em>)</p> </blockquote> <p>void( * ( * ppfunArr)[10])(const char * );<br /> 首先先找到ppfunArr,观察发现它是一个<strong>指针</strong>，去掉 * ppfunArr, 剩下 void( * [10])(const char * )， （）里面是( * [10])，观察发现它是指针数组，因此它是<strong>指向指针数组的指针</strong>， 去掉[10], 剩下void ( * )(const char * ), 观察发现它是函数指针， 故这是一个<strong>指向函数指针数组的指针</strong>，函数的参数为const char*, 返回值为void。</p> <h2> 结尾</h2> <p><strong>函数指针数组和函数指针数组指针是对函数指针更好的调用，更加方便地使用函数功能，他的使用和数组指针和指针数组地使用比较相似，就只是解引用后是函数调用而已！大家多多品味就可以了，很好理解的！<br /> 好啦，今天就分享到这里了，最近忙着期末考试，随后空闲时候，我会继续分享和大家共同学习，感受c语言的魅力！</strong></p> <p><strong>ps：</strong><br /><strong>致敬以前写的博客， 当时还不太会写博客， 一些语法不会， 现在修复很多， 这篇博客算是能看啦！加油，自己！！！</strong></p> </p></div> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2853.htm">通过对抽象模型和概念模型的整合，细化项目整体流程</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2855.htm">Spring 源码BeanFactory使用的准备及自定义属性值解析器</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-6125.htm" title="圣诞款包包(圣诞节的包包)">圣诞款包包(圣诞节的包包)</a></li>
                        <li class="py-2"><a href="/html/category/article-4535.htm" title="聊斋志异之田七郎（顾佳）一看就会，">聊斋志异之田七郎（顾佳）一看就会，</a></li>
                        <li class="py-2"><a href="/html/category/article-4499.htm" title="微单相机哪个品牌的比较好">微单相机哪个品牌的比较好</a></li>
                        <li class="py-2"><a href="/html/category/article-6634.htm" title="青岛动物医学招聘事业编（青岛兽医专业学校）">青岛动物医学招聘事业编（青岛兽医专业学校）</a></li>
                        <li class="py-2"><a href="/html/category/article-4606.htm" title="动物医院好评语30字左右（动物医院好评语30字左右图片）">动物医院好评语30字左右（动物医院好评语30字左右图片）</a></li>
                        <li class="py-2"><a href="/html/category/article-6213.htm" title="附近流浪狗收养中心有几公里（附近有没有流浪狗收养）">附近流浪狗收养中心有几公里（附近有没有流浪狗收养）</a></li>
                        <li class="py-2"><a href="/html/category/article-7187.htm" title="一般给宠物猫打疫苗需要多少钱?（一般给宠物猫打疫苗需要多少钱一针）">一般给宠物猫打疫苗需要多少钱?（一般给宠物猫打疫苗需要多少钱一针）</a></li>
                        <li class="py-2"><a href="/html/category/article-6727.htm" title="狗粮猫粮加工设备什么牌子好一点（宠物狗粮加工设备）">狗粮猫粮加工设备什么牌子好一点（宠物狗粮加工设备）</a></li>
                        <li class="py-2"><a href="/html/category/article-6169.htm" title="狗粮厂家电话号码（狗粮工厂）">狗粮厂家电话号码（狗粮工厂）</a></li>
                        <li class="py-2"><a href="/html/category/article-4388.htm" title="动物打过狂犬疫苗被咬还需要打吗（小动物打过狂犬疫苗）">动物打过狂犬疫苗被咬还需要打吗（小动物打过狂犬疫苗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">8</span> <a href="/html/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>