<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-3072.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>KestrelServer详解自定义一个迷你版的KestrelServer - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">KestrelServer详解自定义一个迷你版的KestrelServer</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<p>和所有的服务器一样，KestrelServer最终需要解决的是网络传输的问题。在《网络连接的创建》，我们介绍了KestrelServer如何利用连接接听器的建立网络连接，并再次基础上演示了如何直接利用建立的连接接收请求和回复响应。本篇更进一步，我们根据其总体设计，定义了迷你版的KestrelServer让读者看看这个重要的服务器大体是如何实现的。本文提供的示例演示已经同步到《ASP.NET Core 6框架揭秘-实例演示版》）</p> <blockquote> <p>一、ConnectionDelegate<br /> 二、IConnectionBuilder<br /> 三、HTTP 1.x/HTTP 2.x V.S. HTTP 3<br /> 四、MiniKestrelServer</p> </blockquote> <h1><font size="4">一、ConnectionDelegate</font></h1> <p>ASP.NET CORE在“应用”层将针对请求的处理抽象成由中间件构建的管道，实际上KestrelServer面向“传输”层的连接也采用了这样的设计。当代表连接的ConnectionContext上下文创建出来之后，后续的处理将交给由连接中间件构建的管道进行处理。我们可以根据需要注册任意的中间件来处理连接，比如可以将并发连结的控制实现在专门的连接中间件中。ASP.NET CORE管道利用RequestDelegate委托来表示请求处理器，连接管道同样定义了如下这个ConnectionDelegate委托。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">delegate</span> Task ConnectionDelegate(ConnectionContext connection);</pre> </div> <h1><font size="4">二、IConnectionBuilder</font></h1> <p>ASP.NET CORE管道中的中间件体现为一个Func<RequestDelegate, RequestDelegate>委托，连接管道的中间件同样可以利用Func<ConnectionDelegate, ConnectionDelegate>委托来表示。ASP.NET CORE管道中的中间件注册到IApplicationBuilder对象上并利用它将管道构建出来。连接管道依然具有如下这个IConnectionBuilder接口，ConnectionBuilder实现了该接口。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IConnectionBuilder {     IServiceProvider ApplicationServices {<span style="color: rgba(0, 0, 255, 1)">get</span>; }     IConnectionBuilder Use(Func<ConnectionDelegate, ConnectionDelegate> middleware);     ConnectionDelegate Build(); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ConnectionBuilder : IConnectionBuilder {<span style="color: rgba(0, 0, 255, 1)">public</span> IServiceProvider ApplicationServices {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> ConnectionDelegate Build();<span style="color: rgba(0, 0, 255, 1)">public</span> IConnectionBuilder Use(Func<ConnectionDelegate, ConnectionDelegate> middleware); }</pre> </div> <p>IConnectionBuilder接口还定义了如下三个扩展方法来注册连接中间件。第一个Use方法使用Func<ConnectionContext, Func<Task>, Task>委托来表示中间件。其余两个方法用来注册管道末端的中间件，这样的中间件本质上就是一个ConnectionDelegate委托，我们可以将其定义成一个派生于ConnectionHandler的类型。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">class</span> ConnectionBuilderExtensions {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IConnectionBuilder Use(<span style="color: rgba(0, 0, 255, 1)">this</span> IConnectionBuilder connectionBuilder,Func<ConnectionContext, Func<Task>, Task> middleware);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IConnectionBuilder Run(<span style="color: rgba(0, 0, 255, 1)">this</span> IConnectionBuilder connectionBuilder,Func<ConnectionContext, Task> middleware);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IConnectionBuilder UseConnectionHandler<TConnectionHandler>(<span style="color: rgba(0, 0, 255, 1)">this</span> IConnectionBuilder connectionBuilder) where TConnectionHandler : ConnectionHandler; }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span><span style="color: rgba(0, 0, 255, 1)">class</span> ConnectionHandler {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">abstract</span> Task OnConnectedAsync(ConnectionContext connection); }</pre> </div> <h1><font size="4">三、HTTP 1.x/HTTP 2.x V.S. HTTP 3</font></h1> <p>KestrelServer针对HTTP 1.X/2和HTTP 3的设计和实现基本上独立的，这一点从监听器的定义就可以看出来。就连接管道来说，基于HTTP 3的多路复用连接通过MultiplexedConnectionContext表示，它也具有“配套”的MultiplexedConnectionDelegate委托和IMultiplexedConnectionBuilder接口。ListenOptions类型同时实现了IConnectionBuilder和IMultiplexedConnectionBuilder接口，意味着我们在注册终结点的时候还可以注册任意中间件。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">delegate</span> Task MultiplexedConnectionDelegate(MultiplexedConnectionContext connection);<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span> IMultiplexedConnectionBuilder {     IServiceProvider ApplicationServices {<span style="color: rgba(0, 0, 255, 1)">get</span>; }     IMultiplexedConnectionBuilder Use(Func<MultiplexedConnectionDelegate, MultiplexedConnectionDelegate> middleware);     MultiplexedConnectionDelegate Build(); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> MultiplexedConnectionBuilder : IMultiplexedConnectionBuilder {<span style="color: rgba(0, 0, 255, 1)">public</span> IServiceProvider ApplicationServices {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> IMultiplexedConnectionBuilder Use(Func<MultiplexedConnectionDelegate, MultiplexedConnectionDelegate> middleware);<span style="color: rgba(0, 0, 255, 1)">public</span> MultiplexedConnectionDelegate Build(); }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ListenOptions : IConnectionBuilder, IMultiplexedConnectionBuilder</pre> </div> <h1 id="s1804"><font size="4">四、MiniKestrelServer</font></h1> <p>在了解了KestrelServer的连接管道后，我们来简单模拟一下这种服务器类型的实现，为此我们定义了一个名为MiniKestrelServer的服务器类型。简单起见，MiniKestrelServer只提供针对HTTP 1.1的支持。对于任何一个服务来说，它需要将请求交付给一个IHttpApplication<TContext>对象进行处理，MiniKestrelServer将这项工作实现在如下这个HostedApplication<TContext>类型中。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> HostedApplication<TContext> : ConnectionHandler where TContext : notnull {<span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> IHttpApplication<TContext> _application;<span style="color: rgba(0, 0, 255, 1)">public</span> HostedApplication(IHttpApplication<TContext> application) => _application = application;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span> async Task OnConnectedAsync(ConnectionContext connection)     {         var reader = connection!.Transport.Input;<span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span>)         {             var result = await reader.ReadAsync();<span style="color: rgba(0, 0, 255, 1)">using</span> (var body =<span style="color: rgba(0, 0, 255, 1)">new</span> MemoryStream())             {                 var (features, request, response) = CreateFeatures(result, body);                 var closeConnection = request.Headers.TryGetValue("<span style="color: rgba(139, 0, 0, 1)">Connection</span>",<span style="color: rgba(0, 0, 255, 1)">out</span> var vallue) && vallue == "<span style="color: rgba(139, 0, 0, 1)">Close</span>";                 reader.AdvanceTo(result.Buffer.End);                  var context = _application.CreateContext(features);                 Exception? exception =<span style="color: rgba(0, 0, 255, 1)">null</span>;<span style="color: rgba(0, 0, 255, 1)">try</span>                 {                     await _application.ProcessRequestAsync(context);                     await ApplyResponseAsync(connection, response, body);                 }<span style="color: rgba(0, 0, 255, 1)">catch</span> (Exception ex)                 {                     exception = ex;                 }<span style="color: rgba(0, 0, 255, 1)">finally</span>                 {                     _application.DisposeContext(context, exception);                 }<span style="color: rgba(0, 0, 255, 1)">if</span> (closeConnection)                 {                     await connection.DisposeAsync();<span style="color: rgba(0, 0, 255, 1)">return</span>;                 }             }<span style="color: rgba(0, 0, 255, 1)">if</span> (result.IsCompleted)             {<span style="color: rgba(0, 0, 255, 1)">break</span>;             }         }<span style="color: rgba(0, 0, 255, 1)">static</span> (IFeatureCollection, IHttpRequestFeature, IHttpResponseFeature) CreateFeatures(ReadResult result, Stream body)         {             var handler =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpParserHandler();             var parserHandler =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpParser(handler);             var length = (<span style="color: rgba(0, 0, 255, 1)">int</span>)result.Buffer.Length;             var array = ArrayPool<<span style="color: rgba(0, 0, 255, 1)">byte</span>>.Shared.Rent(length);<span style="color: rgba(0, 0, 255, 1)">try</span>             {                 result.Buffer.CopyTo(array);                 parserHandler.Execute(<span style="color: rgba(0, 0, 255, 1)">new</span> ArraySegment<<span style="color: rgba(0, 0, 255, 1)">byte</span>>(array, 0, length));             }<span style="color: rgba(0, 0, 255, 1)">finally</span>             {                 ArrayPool<<span style="color: rgba(0, 0, 255, 1)">byte</span>>.Shared.Return(array);             }             var bodyFeature =<span style="color: rgba(0, 0, 255, 1)">new</span> StreamBodyFeature(body);              var features =<span style="color: rgba(0, 0, 255, 1)">new</span> FeatureCollection();             var responseFeature =<span style="color: rgba(0, 0, 255, 1)">new</span> HttpResponseFeature();             features.Set<IHttpRequestFeature>(handler.Request);             features.Set<IHttpResponseFeature>(responseFeature);             features.Set<IHttpResponseBodyFeature>(bodyFeature);<span style="color: rgba(0, 0, 255, 1)">return</span> (features, handler.Request, responseFeature);         }<span style="color: rgba(0, 0, 255, 1)">static</span> async Task ApplyResponseAsync(ConnectionContext connection, IHttpResponseFeature response, Stream body)         {             var builder =<span style="color: rgba(0, 0, 255, 1)">new</span> StringBuilder();             builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">HTTP/1.1 {response.StatusCode} {response.ReasonPhrase}</span>");<span style="color: rgba(0, 0, 255, 1)">foreach</span> (var kv<span style="color: rgba(0, 0, 255, 1)">in</span> response.Headers)             {                 builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">{kv.Key}: {kv.Value}</span>");             }             builder.AppendLine($"<span style="color: rgba(139, 0, 0, 1)">Content-Length: {body.Length}</span>");             builder.AppendLine();             var bytes = Encoding.UTF8.GetBytes(builder.ToString());              var writer = connection.Transport.Output;             await writer.WriteAsync(bytes);             body.Position = 0;             await body.CopyToAsync(writer);         }     } }</pre> </div> <p>HostedApplication<TContext>是对一个IHttpApplication<TContext>对象的封装。它派生于抽象类ConnectionHandler，重写的OnConnectedAsync方法将针对请求的读取和处理置于一个无限循环中。为了将读取的请求转交给IHostedApplication<TContext>对象进行处理，它需要根据特性集合将TContext上下文创建出来。这里提供的特性集合只包含三种核心的特性，一个是描述请求的HttpRequestFeature特性，它是利用HttpParser解析请求荷载内容得到的。另一个是描述响应的HttpResponseFeature特性，至于提供响应主体的特性由如下所示的StreamBodyFeature对象来表示。这三个特性的创建实现在CreateFeatures方法中。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> StreamBodyFeature : IHttpResponseBodyFeature {<span style="color: rgba(0, 0, 255, 1)">public</span> Stream 	Stream {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> PipeWriter 	Writer {<span style="color: rgba(0, 0, 255, 1)">get</span>; }<span style="color: rgba(0, 0, 255, 1)">public</span> StreamBodyFeature(Stream stream)     {         Stream = stream;         Writer = PipeWriter.Create(Stream);     }<span style="color: rgba(0, 0, 255, 1)">public</span> Task CompleteAsync() => Task.CompletedTask;<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> DisableBuffering() { }<span style="color: rgba(0, 0, 255, 1)">public</span> Task SendFileAsync(<span style="color: rgba(0, 0, 255, 1)">string</span> path,<span style="color: rgba(0, 0, 255, 1)">long</span> offset,<span style="color: rgba(0, 0, 255, 1)">long</span>? count,     CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>)=><span style="color: rgba(0, 0, 255, 1)">throw</span><span style="color: rgba(0, 0, 255, 1)">new</span> NotImplementedException();<span style="color: rgba(0, 0, 255, 1)">public</span> Task StartAsync(CancellationToken cancellationToken =<span style="color: rgba(0, 0, 255, 1)">default</span>) => Task.CompletedTask; }</pre> </div> <p>包含三大特性的集合随后作为参数调用了IHostedApplication<TContext>对象的CreateContext方法将TContext上下文创建出来，此上下文作为参数传入了同一对象的ProcessRequestAsync方法，此时中间件管道接管请求。待中间件管道完成处理后， ApplyResponseAsync方法被调用以完成最终的响应工作。ApplyResponseAsync方法将响应状态从HttpResponseFeature特性中提取并生成首行响应内容（“HTTP/1.1 {StatusCode} {ReasonPhrase}”），然后再从这个特性中将响应报头提取出来并生成相应的文本。响应报文的首行内容和报头文本按照UTF-8编码生成二进制数组后利用ConnectionContext上下文的Transport属性返回的IDuplexPipe对象发送出去后，它再将StreamBodyFeature特性收集到的响应主体输出流“拷贝”到这个IDuplexPipe对象中，进而完成了针对响应主体内容的输出。</p> <p>如下所示的是MiniKestrelServer类型的完整定义。该类型的构造函数中注入了用于提供配置选项的IOptions<KestrelServerOptions>特性和IConnectionListenerFactory工厂，并且创建了一个ServerAddressesFeature对象并注册到Features属性返回的特性集合中。</p> <div class="cnblogs_code"> <pre><p><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> MiniKestrelServer : IServer {<span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> KestrelServerOptions _options;<span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> IConnectionListenerFactory _factory;<span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> List<IConnectionListener> _listeners =<span style="color: rgba(0, 0, 255, 1)">new</span>();<span style="color: rgba(0, 0, 255, 1)">public</span> IFeatureCollection Features {<span style="color: rgba(0, 0, 255, 1)">get</span>; } =<span style="color: rgba(0, 0, 255, 1)">new</span> FeatureCollection();<span style="color: rgba(0, 0, 255, 1)">public</span> MiniKestrelServer(IOptions<KestrelServerOptions> optionsAccessor, IConnectionListenerFactory factory)     {         _factory = factory;         _options = optionsAccessor.Value;         Features.Set<IServerAddressesFeature>(<span style="color: rgba(0, 0, 255, 1)">new</span> ServerAddressesFeature());     }<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span> Dispose() => StopAsync(CancellationToken.None).GetAwaiter().GetResult();<span style="color: rgba(0, 0, 255, 1)">public</span> Task StartAsync<TContext>(IHttpApplication<TContext> application, CancellationToken cancellationToken) where TContext : notnull     {         var feature = Features.Get<IServerAddressesFeature>()!;         IEnumerable<ListenOptions> listenOptions;<span style="color: rgba(0, 0, 255, 1)">if</span> (feature.PreferHostingUrls)         {             listenOptions = BuildListenOptions(feature);         }<span style="color: rgba(0, 0, 255, 1)">else</span>         {             listenOptions = _options.GetListenOptions();<span style="color: rgba(0, 0, 255, 1)">if</span> (!listenOptions.Any())             {                 listenOptions = BuildListenOptions(feature);             }         }<span style="color: rgba(0, 0, 255, 1)">foreach</span> (var options<span style="color: rgba(0, 0, 255, 1)">in</span> listenOptions)         {             _ = StartAsync(options);         }<span style="color: rgba(0, 0, 255, 1)">return</span> Task.CompletedTask;          async Task StartAsync(ListenOptions litenOptions)         {             var listener = await _factory.BindAsync(litenOptions.EndPoint,cancellationToken);             _listeners.Add(listener!);</p><p><font color="#ff0000"><strong>var hostedApplication = new HostedApplication<TContext>(application);             var pipeline = litenOptions.Use(next => context => hostedApplication.OnConnectedAsync(context)).Build();</strong></font></p><p><span style="color: rgba(0, 0, 255, 1)">while</span> (<span style="color: rgba(0, 0, 255, 1)">true</span>)             {                 var connection = await listener.AcceptAsync();<span style="color: rgba(0, 0, 255, 1)">if</span> (connection !=<span style="color: rgba(0, 0, 255, 1)">null</span>)                 {                     _ = pipeline(connection);                 }             }         }          IEnumerable<ListenOptions> BuildListenOptions(IServerAddressesFeature feature)         {             var options =<span style="color: rgba(0, 0, 255, 1)">new</span> KestrelServerOptions();<span style="color: rgba(0, 0, 255, 1)">foreach</span> (var address<span style="color: rgba(0, 0, 255, 1)">in</span> feature.Addresses)             {                 var url =<span style="color: rgba(0, 0, 255, 1)">new</span> Uri(address);<span style="color: rgba(0, 0, 255, 1)">if</span> (<span style="color: rgba(0, 0, 255, 1)">string</span>.Compare("<span style="color: rgba(139, 0, 0, 1)">localhost</span>", url.Host,<span style="color: rgba(0, 0, 255, 1)">true</span>) == 0)                 {                     options.ListenLocalhost(url.Port);                 }<span style="color: rgba(0, 0, 255, 1)">else</span>                 {                     options.Listen(IPAddress.Parse(url.Host), url.Port);                 }              }<span style="color: rgba(0, 0, 255, 1)">return</span> options.GetListenOptions();         }     }<span style="color: rgba(0, 0, 255, 1)">public</span> Task StopAsync(CancellationToken cancellationToken) => Task.WhenAll(_listeners.Select(it => it.DisposeAsync().AsTask())); }</p></pre> </div> <p>实现的StartAsync<TContext>方法先将IServerAddressesFeature特性提取出来，并利用其PreferHostingUrls属性决定应该使用直接注册到KestrelOptions配置选项上的终结点还是使用注册在该特定上的监听地址。如果使用后者，注册的监听地址会利用BuildListenOptions方法转换成对应的ListenOptions列表，否则直接从KestrelOptions对象的ListenOptions属性提取所有的ListenOptions列表，由于这是一个内部属性，不得不利用如下这个扩展方法以反射的方式获取这个列表。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">class</span> KestrelServerOptionsExtensions {<span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span> IEnumerable<ListenOptions> GetListenOptions(<span style="color: rgba(0, 0, 255, 1)">this</span> KestrelServerOptions options)     {         var property =<span style="color: rgba(0, 0, 255, 1)">typeof</span>(KestrelServerOptions).GetProperty("<span style="color: rgba(139, 0, 0, 1)">ListenOptions</span>",BindingFlags.NonPublic | BindingFlags.Instance);<span style="color: rgba(0, 0, 255, 1)">return</span> (IEnumerable<ListenOptions>)property!.GetValue(options)!;     } }</pre> </div> <p>对于每一个表示注册终结点的ListenOptions配置选项，StartAsync<TContext>方法利用IConnectionListenerFactory工厂将对应的IConnectionListener监听器创建出来，并绑定到指定的终结点上监听连接请求。表示连接的ConnectionContext上下文一旦被创建出来后，该方法便会利用构建的连接管道对它进行处理。在调用ListenOptions配置选项的Build方法构建连接管道前，StartAsync<TContext>方法将HostedApplication<TContext>对象创建出来并作为中间件进行了注册。所以针对连接的处理将被这个HostedApplication<TContext>对象接管。</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">using</span> App;<span style="color: rgba(0, 0, 255, 1)">using</span> Microsoft.AspNetCore.Hosting.Server;<span style="color: rgba(0, 0, 255, 1)">using</span> Microsoft.Extensions.DependencyInjection.Extensions;  var builder = WebApplication.CreateBuilder(); builder.WebHost.UseKestrel(kestrel => kestrel.ListenLocalhost(5000));<font color="#ff0000"><strong>builder.Services.Replace(ServiceDescriptor.Singleton<IServer, MiniKestrelServer>());</strong></font> var app = builder.Build(); app.Run(context => context.Response.WriteAsync("<span style="color: rgba(139, 0, 0, 1)">Hello World!</span>")); app.Run();</pre> </div> <p>如上所示的演示程序将替换了针对IServer的服务注册，意味着默认的KestrelServer将被替换成自定义的MiniKestrelServer。启动该程序后，由浏览器发送的HTTP请求（不支持HTTPS）同样会被正常处理，并得到如图18-6所示的响应内容。需要强调一下，MiniKestrelServer仅仅用来模拟KestrelServer的实现原理，不要觉得真实的实现会如此简单。</p> <p><img decoding="async" width="240" height="103" title="clip_image002" style="border: 0 currentColor; border-image: none; display: inline; background-image: none" alt="clip_image002" src="http://img.555519.xyz/uploads3/20220510/33cda654492fec4ed89d784531961e71.jpg"><br />图1 由MiniKestrelServer回复的响应内容</p> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-3071.htm">springboot中emoji表情配置及springboot数据源配置区别</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-3073.htm">R语言学习笔记之lm函数</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-4343.htm" title="开宠物店的进货渠道（开宠物店进货渠道怎么找）">开宠物店的进货渠道（开宠物店进货渠道怎么找）</a></li>
                        <li class="py-2"><a href="/html/category/article-3116.htm" title="Kafka 单机（集群）安装部署（自带zookeeper）">Kafka 单机（集群）安装部署（自带zookeeper）</a></li>
                        <li class="py-2"><a href="/html/category/article-4088.htm" title="Amazing巧用 CSS 视差实现酷炫交互动效详解">Amazing巧用 CSS 视差实现酷炫交互动效详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3109.htm" title="C++内存泄漏的定位方法总结">C++内存泄漏的定位方法总结</a></li>
                        <li class="py-2"><a href="/html/category/article-4422.htm" title="大中型饲料颗粒机（大中型颗粒饲料机价格）">大中型饲料颗粒机（大中型颗粒饲料机价格）</a></li>
                        <li class="py-2"><a href="/html/category/article-4087.htm" title="win11系统怎么安装TPM诊断">win11系统怎么安装TPM诊断</a></li>
                        <li class="py-2"><a href="/html/category/article-4498.htm" title="斗鱼剧情（斗鱼的大结局）">斗鱼剧情（斗鱼的大结局）</a></li>
                        <li class="py-2"><a href="/html/category/article-3112.htm" title="30秒急速配置mybatis-plus多租户配置">30秒急速配置mybatis-plus多租户配置</a></li>
                        <li class="py-2"><a href="/html/category/article-3119.htm" title="Cpp的异常处理Exception Handling-笔记">Cpp的异常处理Exception Handling-笔记</a></li>
                        <li class="py-2"><a href="/html/category/article-4144.htm" title="Java中File类方法详解以及实践_java">Java中File类方法详解以及实践_java</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">38</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>