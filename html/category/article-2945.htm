<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://omanaddress.github.io/html/category/article-2945.htm" />
    <!-- ========== Meta Tags ========== -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">

    <!-- ========== Page Title ========== -->
    <title>C++学习笔记15-类和对象-C++对象模型和this指针 - Oman Address</title>
        <link rel="icon" href="/assets/addons/xcblog/img/omanaddress/favicon.ico" type="image/x-icon"/>

    <!-- ========== Start Stylesheet ========== -->
    <link href="/assets/addons/xcblog/css/omanaddress/bootstrap.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/font-awesome.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/themify-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/flaticon-set.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/elegant-icons.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/magnific-popup.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.carousel.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/owl.theme.default.min.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/animate.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/bootsnav.css" rel="stylesheet" />
    <link href="/assets/addons/xcblog/css/omanaddress/style.css" rel="stylesheet">
    <link href="/assets/addons/xcblog/css/omanaddress/responsive.css" rel="stylesheet" />
    <!-- ========== End Stylesheet ========== -->

    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/html5shiv.min.js"></script>
      <script src="/assets/addons/xcblog/js/frontend/omanaddress/html5/respond.min.js"></script>
    <![endif]-->

    <!-- ========== Google Fonts ========== -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;600;700;800&display=swap" rel="stylesheet">
    <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "https://hm.baidu.com/hm.js?afd972d72a67e62884759c9ecd23c891";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body>
        <!-- Header 
    ============================================= -->
    <header id="home">

        <!-- Start Navigation -->
        <nav class="navbar navbar-default attr-border navbar-sticky dark bootsnav">

            <div class="container-full">
                <!-- Start Header Navigation -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#navbar-menu">
                        <i class="fa fa-bars"></i>
                    </button>
                    <a class="navbar-brand" href="/">
                            <img src="/assets/addons/xcblog/img/omanaddress/logo-s.png" class="logo" alt="Logo">
                            Oman Address
                    </a>
                </div>
                <!-- End Header Navigation -->

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="navbar-menu">
                    <ul class="nav navbar-nav navbar-right" data-in="fadeInDown" data-out="fadeOutUp">
                                                <li>
                            <a href="/">首页</a>
                        </li>
                                                <li>
                            <a href="/html/category/">文章分类</a>
                        </li>
                                                <li>
                            <a href="#">关于</a>
                        </li>
                        <li>
                            <a href="#">联系</a>
                        </li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div>

        </nav>
        <!-- End Navigation -->

    </header>
    <!-- End Header -->
    <!-- Start Breadcrumb 
    ============================================= -->
    <div class="breadcrumb-area bg-gray text-center shadow dark text-light bg-cover" style="background-image: url(/assets/addons/xcblog/img/omanaddress/banner/26.jpg);">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 offset-lg-2">
                    <h1 style="word-break: break-all;">C++学习笔记15-类和对象-C++对象模型和this指针</h1>
                    <ul class="breadcrumb">
                        <li><a href="/"><i class="fas fa-home"></i> 首页</a></li>
                        <li><a href="/html/category/"> 文章分类</a></li>
                        <li class="active">正文</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
    <!-- End Breadcrumb -->
    <!-- Start Blog
    ============================================= -->
    <div class="blog-area single full-blog full-blog default-padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div class="blog-items">
                        <div class="row">
                            <div class="blog-content col-lg-10 offset-lg-1 col-md-12">
                                <div class="item">
                                    <div class="blog-item-box">
                                        <!-- Start Post Thumb -->
                                        <div class="content">
                                              				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <div class="toc"> <h3>类和对象-C++对象模型和this指针</h3> <ul> <li><a href="#151__2" rel="nofollow">15.1 成员变量和成员函数分开存储</a></li> <li><a href="#152_this_64" rel="nofollow">15.2 this指针概念</a></li> <li><a href="#153__157" rel="nofollow">15.3 空指针访问成员函数</a></li> <li><a href="#154_const_203" rel="nofollow">15.4 const修饰成员函数</a></li> </ul> </div> <h1> <a id="151__2" rel="nofollow"></a>15.1 成员变量和成员函数分开存储</h1> <p>在C++中：</p> <ul> <li>类内的成员变量和成员函数分开存储。</li> <li>只有非静态成员变量才属于类的对象上。</li> <li>类对象的存储方式为字节对齐，总大小为类中最宽基本类型成员大小×非静态成员变量数量。</li> </ul> <p>示例：</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token comment">//成员变量和成员函数的分开</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person_2</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span>			   <span class="token comment">//非静态成员变量属于类的对象上</span> 	<span class="token keyword">static</span> string m_Name<span class="token punctuation">;</span>  <span class="token comment">//静态成员变量不属于类的对象上</span> 	<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>		   <span class="token comment">//非静态函数函数不属于类的对象上</span> 	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> <span class="token comment">//静态函数函数不属于类的对象上</span> <span class="token comment">//只有非静态成员变量属于类的对象上	</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person_3</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> 	<span class="token keyword">double</span> m_B<span class="token punctuation">;</span> 	<span class="token keyword">char</span> m_C<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> string m_Name <span class="token operator">=</span> <span class="token string">"zzz"</span><span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">test1_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person p<span class="token punctuation">;</span> 	<span class="token comment">//空对象占用内存空间为:1 </span> 	<span class="token comment">//因为编译器会为每个空对象分配一个字节空间,仅仅用来区分不同空对象,使得不同空对象都有一个独一无二的内存位置。</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">test1_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person_2 p<span class="token punctuation">;</span> 	<span class="token comment">//非静态成员变量属于类的对象上,这里有有一个int，所以是4</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">test1_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person_3 p<span class="token punctuation">;</span> 	<span class="token comment">//字节对齐，和最大的对齐，double为8，所以为3*8</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of p = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test1_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">test1_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token function">test1_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p></p> <h1> <a id="152_this_64" rel="nofollow"></a>15.2 this指针概念</h1> <p>我们知道在C++中成员变量和成员函数是分开存储的，</p> <p>每一个非静态成员函数只会诞生一份函数实例， 也就是说多个同类型的对象（一个实例化的多个对象）会共用一块函数代码。</p> <p>那么问题是：<strong>这一块代码是如何区分那个对象调用自己的呢?</strong></p> <p>C++通过提供特殊的对象指针，this指针，解决上述问题——<strong>this指针指向被调用的成员函数所属的对象</strong>。</p> <p>this指针是隐含每一个非静态成员函数内的一种指针，</p> <p>this指针不需要定义，直接使用即可。</p> <p>this指针的用途：</p> <ul> <li>当形参和成员变星同名时,可用this指针来区分</li> <li>在类的非静态成员函数中返回对象本身，可使用 <code>return *this</code> （*this就是解引用，将这个指针解引用，就得到对象本身）。注意要指明返回数据类型为这个类的引用的数据类型。</li> </ul> <p>示例：</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		age <span class="token operator">=</span> age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Person2_02</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token function">Person2_02</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">PersonAddAge</span><span class="token punctuation">(</span>Person2_02<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	Person2_02 <span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>Person2_02<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>   <span class="token comment">//因为返回类型是一个对象类型，如果直接用这个类的类型接收，会开辟新的内存来接收返回值</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">typeid</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//可以看到(*this)的数据类型是class Person2_02</span> 		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	Person2_02<span class="token operator">&amp;</span> <span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>Person2_02<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>   <span class="token comment">//因为返回类型是一个对象类型，用引用接收，可以将本体返回。</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>age <span class="token operator">+</span><span class="token operator">=</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span> 	 		<span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test2_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person2 <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p的年龄为："</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	Person2_02 <span class="token function">p1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p1的年龄为："</span> <span class="token operator">&lt;&lt;</span> p1<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	Person2_02 <span class="token function">p2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	p2<span class="token punctuation">.</span><span class="token function">PersonAddAge</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"改变后p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  	<span class="token comment">//如果我想多次调用p2的函数，那么需要每次将对象返回。</span> 	<span class="token comment">//链式编程思想</span> 	p2<span class="token punctuation">.</span><span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//理论上应该是15+5+5+5 = 30，但是结果是15+5=20</span> 	<span class="token comment">//因为每次都是另开辟内存来接收返回的对象，导致不能在原对象上做运算。 </span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"再后来改变后p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  	p2<span class="token punctuation">.</span><span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PersonAddAge3</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//20+5+5+5</span> 	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最后改变后p2的年龄为："</span> <span class="token operator">&lt;&lt;</span> p2<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test2_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p></p> <h1> <a id="153__157" rel="nofollow"></a>15.3 空指针访问成员函数</h1> <p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针 。</p> <p>如果用到this指针，需要加以判断保证代码的健壮性。</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Person3</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token keyword">void</span> <span class="token function">showClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"this is Person3 class"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">void</span> <span class="token function">showPerson3Age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> 		<span class="token punctuation">{<!-- --></span> 			<span class="token keyword">return</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token comment">//报错原因是因为传入的指针为NULL，  </span> 		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"age = "</span> <span class="token operator">&lt;&lt;</span> m_Age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//调用m_Age时，其实是这个代码：this-&gt;m_Age,现在this为空，所以报错。</span> 	<span class="token punctuation">}</span> 	<span class="token keyword">int</span> m_Age<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test3_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person3<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> 	p<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">showClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	p<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">showPerson3Age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test3_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> <p></p> <h1> <a id="154_const_203" rel="nofollow"></a>15.4 const修饰成员函数</h1> <p><strong>常函数</strong>:</p> <ul> <li>成员函数后加const后我们称为这个函数为常函数。</li> <li>常函数内<strong>不可以修改成员属性</strong>。</li> <li>成员属性声明时加关键字<code>mutable</code>后，在常函数中依然可以修改。</li> </ul> <p>语法：</p> <pre><code class="prism language-cpp"><span class="token comment">//常函数</span> 返回值类型 函数名<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>  <span class="token comment">//mutable</span> <span class="token keyword">mutable</span> 数据类型 变量名<span class="token punctuation">;</span> </code></pre> <p><strong>常对象</strong>:</p> <ul> <li>常对象的所有成员变量都不可修改。</li> <li>成员属性声明时加关键字<code>mutable</code>后，依然可以修改。</li> <li>声明对象前加<code>const</code>称该对象为常对象。</li> <li>常对象<strong>只能调用常函数</strong>。</li> </ul> <pre><code class="prism language-cpp"><span class="token comment">//常对象</span> <span class="token keyword">const</span> 对象名 对象<span class="token punctuation">;</span> </code></pre> <p><strong>示例</strong>：</p> <pre><code class="prism language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Person4</span> <span class="token punctuation">{<!-- --></span> <span class="token keyword">public</span><span class="token operator">:</span> 	<span class="token comment">//this指针本质就是一个指针常量(指针的指向不可更改)  类似于Person* const this;</span> 	<span class="token comment">//加上const后，就相当于const Person *const this,即指针指向的值也不可修改。</span> 	<span class="token keyword">void</span> <span class="token function">showPerson4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> 	<span class="token punctuation">{<!-- --></span>  		<span class="token comment">//this = NULL; this指针是不可修改的，</span> 		<span class="token comment">//this-&gt;m_A = 100;</span> 		<span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">&gt;</span>m_B <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 	<span class="token punctuation">{<!-- --></span> 		m_A <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  	<span class="token keyword">int</span> m_A<span class="token punctuation">;</span> 	<span class="token keyword">mutable</span> <span class="token keyword">int</span> m_B<span class="token punctuation">;</span>  <span class="token comment">//变量加上关键字mutable后，就仍旧是可以更改的。</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">test4_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	Person4 p<span class="token punctuation">;</span> 	p<span class="token punctuation">.</span><span class="token function">showPerson4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">void</span> <span class="token function">test4_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">const</span> Person4 p<span class="token punctuation">;</span>  <span class="token comment">//变为常对象</span> 	<span class="token comment">//p.m_A = 100;</span> 	p<span class="token punctuation">.</span>m_B <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>      <span class="token comment">//m_B加了mutable，在常对象下也是可以修改的。</span> 	 	<span class="token comment">//常对象只能调用常函数</span> 	p<span class="token punctuation">.</span><span class="token function">showPerson4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token comment">//p.func();//非常函数不可调用</span> 	<span class="token comment">//因为非常函数内可以修改成员变量，但是常对象已经被规定它的成员变量是不可修改的，所以会报错。</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 	<span class="token function">test4_01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> </code></pre> </p></div> 			                                            <div class="col-md-12 mt-5">
                                                                                                <p>上一个：<a href="/html/category/article-2944.htm">将时间戳值增加微秒以将其转换为整数，MySQL将返回什么？</a></p>
                                                                                                <p>下一个：<a href="/html/category/article-2946.htm">JavaScript将相同条目分组为子数组方法详解</a></p>
                                                                                            </div>
                                                                                    </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/html/category/article-3118.htm" title="Internet Explorer无法为 <m​​ain>元素呈现任何类型的背景颜色。">Internet Explorer无法为 <m​​ain>元素呈现任何类型的背景颜色。</a></li>
                        <li class="py-2"><a href="/html/category/article-4313.htm" title="猫怎么驱虫正确方法（猫怎样驱虫?）">猫怎么驱虫正确方法（猫怎样驱虫?）</a></li>
                        <li class="py-2"><a href="/html/category/article-3114.htm" title="springboot的poi导入和导出">springboot的poi导入和导出</a></li>
                        <li class="py-2"><a href="/html/category/article-4088.htm" title="Amazing巧用 CSS 视差实现酷炫交互动效详解">Amazing巧用 CSS 视差实现酷炫交互动效详解</a></li>
                        <li class="py-2"><a href="/html/category/article-3090.htm" title="Uniapp实现自定义组件">Uniapp实现自定义组件</a></li>
                        <li class="py-2"><a href="/html/category/article-3113.htm" title="java计算器页面的实现">java计算器页面的实现</a></li>
                        <li class="py-2"><a href="/html/category/article-3110.htm" title="Vue刷新页面数据持久化">Vue刷新页面数据持久化</a></li>
                        <li class="py-2"><a href="/html/category/article-3085.htm" title="MySQL在日期中添加“半年间隔”的不同方式是什么？">MySQL在日期中添加“半年间隔”的不同方式是什么？</a></li>
                        <li class="py-2"><a href="/html/category/article-3077.htm" title="企业应用架构研究系列十九：Docker开发环境">企业应用架构研究系列十九：Docker开发环境</a></li>
                        <li class="py-2"><a href="/html/category/article-4116.htm" title="我们如何借助组函数COUNT（*）和GROUP BY子句知道列中值的重复？">我们如何借助组函数COUNT（*）和GROUP BY子句知道列中值的重复？</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/html/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/html/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">62</span> <a href="/html/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">44</span> <a href="/html/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- End Blog -->
        <!-- Star Footer
    ============================================= -->
    <footer class="bg-dark text-light">
        <!-- Footer Bottom -->
        <div class="footer-bottom">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6">
                        <p>
                            Oman Address 版权所有
                            <br />
                            Powered by WordPress
                        </p>
                    </div>
                    <div class="col-lg-6 text-right link">
                        <ul>
                            <li>
                                <a href="#">Terms</a>
                            </li>
                            <li>
                                <a href="#">Privacy</a>
                            </li>
                            <li>
                                <a href="#">Support</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Footer Bottom -->
    </footer>
    <!-- End Footer-->

    <!-- jQuery Frameworks
    ============================================= -->
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery-1.12.4.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/popper.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootstrap.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.appear.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.easing.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.magnific-popup.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/modernizr.custom.13711.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/owl.carousel.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/wow.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/progress-bar.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/isotope.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/imagesloaded.pkgd.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/count-to.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/YTPlayer.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/jquery.nice-select.min.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/loopcounter.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/bootsnav.js"></script>
    <script src="/assets/addons/xcblog/js/frontend/omanaddress/main.js"></script>
    <script>
    $(function() {
        $('.js_to').click(function() {
            var url = $(this).data('url');
            var code = $(this).data('code');
            url += code;

            window.open(url);
        })
    });
    </script>
</body>

</html>